
vim_fsae_rev0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f64  08007f64  0002042c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f6c  08007f6c  0002042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000042c  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000765c  2000042c  080083a0  0002042c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007a88  080083a0  00027a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d498  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be3  00000000  00000000  0003d8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000414d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  000429e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bba  00000000  00000000  00043d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bc5  00000000  00000000  00068932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de2ef  00000000  00000000  000814f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a84  00000000  00000000  0015f838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000042c 	.word	0x2000042c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e6c 	.word	0x08007e6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000430 	.word	0x20000430
 800020c:	08007e6c 	.word	0x08007e6c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <init>:
bool lowMode = true;

// init
//  What needs to happen on startup in order to run GopherCAN
void init(CAN_HandleTypeDef* hcan_ptr)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	example_hcan = hcan_ptr;
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <init+0x44>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(example_hcan, THIS_MODULE_ID, BXTYPE_MASTER))
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <init+0x44>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2200      	movs	r2, #0
 8000528:	2103      	movs	r1, #3
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f9c8 	bl	80018c0 <init_can>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d000      	beq.n	8000538 <init+0x24>
	{
		// an error has occurred, stay here
		while (1);
 8000536:	e7fe      	b.n	8000536 <init+0x22>
	}

	// enable all of the variables in GopherCAN for testing
	set_all_params_state(TRUE);
 8000538:	2001      	movs	r0, #1
 800053a:	f001 fa6f 	bl	8001a1c <set_all_params_state>

	clear();
 800053e:	f000 f89b 	bl	8000678 <clear>
	setStripBrightness(100);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 f970 	bl	8000828 <setStripBrightness>
	generateRainbow(rainbowArr);
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <init+0x48>)
 800054a:	f000 f9ad 	bl	80008a8 <generateRainbow>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000448 	.word	0x20000448
 800055c:	20000450 	.word	0x20000450

08000560 <can_buffer_handling_loop>:

// can_buffer_handling_loop
//  This loop will handle CAN RX software task and CAN TX hardware task. Should be
//  called every 1ms or as often as received messages should be handled
void can_buffer_handling_loop()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	// handle each RX message in the buffer
	if (service_can_rx_buffer())
 8000564:	f001 fd40 	bl	8001fe8 <service_can_rx_buffer>
	{
		// an error has occurred
	}

	// handle the transmission hardware for each CAN bus
	service_can_tx_hardware(example_hcan);
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <can_buffer_handling_loop+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fc97 	bl	8001ea0 <service_can_tx_hardware>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000448 	.word	0x20000448

0800057c <main_loop>:

// main_loop
//  another loop. This includes logic for sending a CAN command. Designed to be
//  called every 10ms
void main_loop()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af04      	add	r7, sp, #16
	uint32_t time = HAL_GetTick();
 8000582:	f002 f93d 	bl	8002800 <HAL_GetTick>
 8000586:	60f8      	str	r0, [r7, #12]
	if(time - lastUpdate >= 10)
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <main_loop+0xb8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	2b09      	cmp	r3, #9
 8000592:	d94a      	bls.n	800062a <main_loop+0xae>
	{
		lastUpdate = time;
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <main_loop+0xb8>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6013      	str	r3, [r2, #0]

		  request_parameter(PRIO_LOW, DLM_ID, rpm_ecu.param_id);
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <main_loop+0xbc>)
 800059c:	799b      	ldrb	r3, [r3, #6]
 800059e:	461a      	mov	r2, r3
 80005a0:	2101      	movs	r1, #1
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 faf8 	bl	8001b98 <request_parameter>
		  uint32_t rpm = rpm_ecu.data;
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <main_loop+0xbc>)
 80005aa:	891b      	ldrh	r3, [r3, #8]
 80005ac:	60bb      	str	r3, [r7, #8]

		  if(lowMode) {
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <main_loop+0xc0>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d01f      	beq.n	80005f6 <main_loop+0x7a>
			  uint32_t percent = map(rpm, 0, 9000, 0, 100);
 80005b6:	68b8      	ldr	r0, [r7, #8]
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	f242 3228 	movw	r2, #9000	; 0x2328
 80005c2:	2100      	movs	r1, #0
 80005c4:	f000 f954 	bl	8000870 <map>
 80005c8:	4603      	mov	r3, r0
 80005ca:	607b      	str	r3, [r7, #4]
			  rpmProgressBar(percent, 0, 255, 0, 255, 0, 0);
 80005cc:	2300      	movs	r3, #0
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2300      	movs	r3, #0
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	23ff      	movs	r3, #255	; 0xff
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22ff      	movs	r2, #255	; 0xff
 80005dc:	2100      	movs	r1, #0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 fb58 	bl	8000c94 <rpmProgressBar>

			  if(rpm > 9000)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	f242 3228 	movw	r2, #9000	; 0x2328
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d91b      	bls.n	8000626 <main_loop+0xaa>
			  {
				  lowMode = false;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <main_loop+0xc0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e017      	b.n	8000626 <main_loop+0xaa>
			  }
		  }
		  else
		  {
			  rainbow(i);
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <main_loop+0xc4>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa92 	bl	8000b24 <rainbow>
			  write();
 8000600:	f000 f85a 	bl	80006b8 <write>
			  i--;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <main_loop+0xc4>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	3b01      	subs	r3, #1
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <main_loop+0xc4>)
 800060e:	801a      	strh	r2, [r3, #0]
			  lastUpdate = time;
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <main_loop+0xb8>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6013      	str	r3, [r2, #0]
			  if(i < 0){
				  i = NUM_PIXELS-1;
			  }
			  if(rpm < 8500)
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	f242 1233 	movw	r2, #8499	; 0x2133
 800061c:	4293      	cmp	r3, r2
 800061e:	d802      	bhi.n	8000626 <main_loop+0xaa>
			  {
				  lowMode = true;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <main_loop+0xc0>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  write();
 8000626:	f000 f847 	bl	80006b8 <write>
	}
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000044c 	.word	0x2000044c
 8000638:	20003490 	.word	0x20003490
 800063c:	20000002 	.word	0x20000002
 8000640:	20000000 	.word	0x20000000

08000644 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <vApplicationGetIdleTaskMemory+0x2c>)
 8000654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <vApplicationGetIdleTaskMemory+0x30>)
 800065a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000662:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	20000b34 	.word	0x20000b34
 8000674:	20000be8 	.word	0x20000be8

08000678 <clear>:
 */
uint8_t  ledData[NUM_PIXELS][4]	= {0};


void clear()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	memset(ledData, 0, sizeof(ledData[0][0]) * NUM_PIXELS * 4);
 800067e:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8000682:	2100      	movs	r1, #0
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <clear+0x3c>)
 8000686:	f007 fb27 	bl	8007cd8 <memset>
	for (int i = 0; i < NUM_PIXELS; i++)
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e008      	b.n	80006a2 <clear+0x2a>
	{
		ledData[i][BRIGHTNESS_INDEX] = 255;
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <clear+0x3c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < NUM_PIXELS; i++)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b92      	cmp	r3, #146	; 0x92
 80006a6:	ddf3      	ble.n	8000690 <clear+0x18>
	}
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20002bac 	.word	0x20002bac

080006b8 <write>:

void write()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
	for (int colorPhasePixelIndex = 0; colorPhasePixelIndex < NUM_PIXELS; colorPhasePixelIndex++)
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
 80006c2:	e070      	b.n	80007a6 <write+0xee>
	{
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80006c4:	4a3f      	ldr	r2, [pc, #252]	; (80007c4 <write+0x10c>)
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80006cc:	4619      	mov	r1, r3
							 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80006ce:	4a3d      	ldr	r2, [pc, #244]	; (80007c4 <write+0x10c>)
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	78db      	ldrb	r3, [r3, #3]
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80006d8:	fb01 f303 	mul.w	r3, r1, r3
							 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80006dc:	4a3a      	ldr	r2, [pc, #232]	; (80007c8 <write+0x110>)
 80006de:	fb82 1203 	smull	r1, r2, r2, r3
 80006e2:	441a      	add	r2, r3
 80006e4:	11d2      	asrs	r2, r2, #7
 80006e6:	17db      	asrs	r3, r3, #31
 80006e8:	1ad3      	subs	r3, r2, r3
		uint32_t red  = 	(ledData[colorPhasePixelIndex][RED_INDEX] *
 80006ea:	617b      	str	r3, [r7, #20]
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 80006ec:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <write+0x10c>)
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	4619      	mov	r1, r3
				 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 80006f8:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <write+0x10c>)
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	78db      	ldrb	r3, [r3, #3]
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 8000702:	fb01 f303 	mul.w	r3, r1, r3
				 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8000706:	4a30      	ldr	r2, [pc, #192]	; (80007c8 <write+0x110>)
 8000708:	fb82 1203 	smull	r1, r2, r2, r3
 800070c:	441a      	add	r2, r3
 800070e:	11d2      	asrs	r2, r2, #7
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad3      	subs	r3, r2, r3
		uint32_t green = 	(ledData[colorPhasePixelIndex][GREEN_INDEX] *
 8000714:	613b      	str	r3, [r7, #16]
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 8000716:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <write+0x10c>)
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	4619      	mov	r1, r3
	 	 	 	 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8000722:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <write+0x10c>)
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	78db      	ldrb	r3, [r3, #3]
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 800072c:	fb01 f303 	mul.w	r3, r1, r3
	 	 	 	 	 	 	 ledData[colorPhasePixelIndex][BRIGHTNESS_INDEX]) / 255;
 8000730:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <write+0x110>)
 8000732:	fb82 1203 	smull	r1, r2, r2, r3
 8000736:	441a      	add	r2, r3
 8000738:	11d2      	asrs	r2, r2, #7
 800073a:	17db      	asrs	r3, r3, #31
 800073c:	1ad3      	subs	r3, r2, r3
		uint32_t blue  = 	(ledData[colorPhasePixelIndex][BLUE_INDEX] *
 800073e:	60fb      	str	r3, [r7, #12]
		uint32_t color = 	(green << 16) | (red <<  8) | (blue);
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	041a      	lsls	r2, r3, #16
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	4313      	orrs	r3, r2
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
		uint32_t mask  = 	 0x00000001 << (BITS_PER_PIXEL - 1);
 8000750:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000754:	607b      	str	r3, [r7, #4]

		for (int i = 0; i < BITS_PER_PIXEL; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	e01e      	b.n	800079a <write+0xe2>
		{
			// Where in the pwm array we are. +24 due to front DMA padding
			uint32_t pwmIndex = colorPhasePixelIndex * BITS_PER_PIXEL + i + 24;
 800075c:	69fa      	ldr	r2, [r7, #28]
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	461a      	mov	r2, r3
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	4413      	add	r3, r2
 800076c:	3318      	adds	r3, #24
 800076e:	603b      	str	r3, [r7, #0]
			if ((mask >> i) & color)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	40da      	lsrs	r2, r3
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4013      	ands	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d005      	beq.n	800078a <write+0xd2>
			{
				// Write 1
				pwmData[pwmIndex] = ONE_HIGH_TIME;
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <write+0x114>)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2154      	movs	r1, #84	; 0x54
 8000784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000788:	e004      	b.n	8000794 <write+0xdc>
			}
			else
			{
				// Write 0
				pwmData[pwmIndex] = ZERO_HIGH_TIME;
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <write+0x114>)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	211c      	movs	r1, #28
 8000790:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < BITS_PER_PIXEL; i++)
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	3301      	adds	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	2b17      	cmp	r3, #23
 800079e:	dddd      	ble.n	800075c <write+0xa4>
	for (int colorPhasePixelIndex = 0; colorPhasePixelIndex < NUM_PIXELS; colorPhasePixelIndex++)
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	3301      	adds	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	2b92      	cmp	r3, #146	; 0x92
 80007aa:	dd8b      	ble.n	80006c4 <write+0xc>
			}
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t*)pwmData, ARRAY_SIZE);
 80007ac:	f640 53e1 	movw	r3, #3553	; 0xde1
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <write+0x114>)
 80007b2:	210c      	movs	r1, #12
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <write+0x118>)
 80007b6:	f004 fc2b 	bl	8005010 <HAL_TIM_PWM_Start_DMA>
}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20002bac 	.word	0x20002bac
 80007c8:	80808081 	.word	0x80808081
 80007cc:	20000fe8 	.word	0x20000fe8
 80007d0:	20002e68 	.word	0x20002e68

080007d4 <setPixelColor>:

void setPixelColor(uint32_t ledNum, uint8_t red, uint8_t green, uint8_t blue)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	70fb      	strb	r3, [r7, #3]
 80007e6:	460b      	mov	r3, r1
 80007e8:	70bb      	strb	r3, [r7, #2]
 80007ea:	4613      	mov	r3, r2
 80007ec:	707b      	strb	r3, [r7, #1]
	if (ledNum >= NUM_PIXELS) return;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b92      	cmp	r3, #146	; 0x92
 80007f2:	d811      	bhi.n	8000818 <setPixelColor+0x44>
	ledData[ledNum][0] = red;
 80007f4:	490b      	ldr	r1, [pc, #44]	; (8000824 <setPixelColor+0x50>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	78fa      	ldrb	r2, [r7, #3]
 80007fa:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	ledData[ledNum][1] = green;
 80007fe:	4a09      	ldr	r2, [pc, #36]	; (8000824 <setPixelColor+0x50>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	78ba      	ldrb	r2, [r7, #2]
 8000808:	705a      	strb	r2, [r3, #1]
	ledData[ledNum][2] = blue;
 800080a:	4a06      	ldr	r2, [pc, #24]	; (8000824 <setPixelColor+0x50>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	787a      	ldrb	r2, [r7, #1]
 8000814:	709a      	strb	r2, [r3, #2]
 8000816:	e000      	b.n	800081a <setPixelColor+0x46>
	if (ledNum >= NUM_PIXELS) return;
 8000818:	bf00      	nop
}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20002bac 	.word	0x20002bac

08000828 <setStripBrightness>:
		setPixel(i, red, green, blue, brightness);
	}
}

void setStripBrightness(uint32_t brightness)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if (brightness > 255) brightness = 255;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	d901      	bls.n	800083a <setStripBrightness+0x12>
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_PIXELS; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e00a      	b.n	8000856 <setStripBrightness+0x2e>
	{
		ledData[i][BRIGHTNESS_INDEX] = brightness;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	b2d9      	uxtb	r1, r3
 8000844:	4a09      	ldr	r2, [pc, #36]	; (800086c <setStripBrightness+0x44>)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < NUM_PIXELS; i++)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b92      	cmp	r3, #146	; 0x92
 800085a:	ddf1      	ble.n	8000840 <setStripBrightness+0x18>
	}
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20002bac 	.word	0x20002bac

08000870 <map>:
		ledData[ledNum][BRIGHTNESS_INDEX] = brightness;
	}
}

int32_t map(int32_t x, int32_t inputMin, int32_t inputMax, int32_t outputMin, int32_t outputMax)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
  return (x - inputMin) * (outputMax - outputMin) / (inputMax - inputMin) + outputMin;
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	69b9      	ldr	r1, [r7, #24]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	1a8a      	subs	r2, r1, r2
 800088a:	fb03 f202 	mul.w	r2, r3, r2
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1acb      	subs	r3, r1, r3
 8000894:	fb92 f2f3 	sdiv	r2, r2, r3
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	4413      	add	r3, r2
}
 800089c:	4618      	mov	r0, r3
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <generateRainbow>:

void generateRainbow(uint32_t rainbowArr[NUM_PIXELS][3])
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	6078      	str	r0, [r7, #4]
	uint32_t colorPhaseStartIndex = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	76fb      	strb	r3, [r7, #27]
 80008b8:	e128      	b.n	8000b0c <generateRainbow+0x264>
	{
		uint32_t numPhasePixels = (NUM_PIXELS / NUM_COLOR_PHASES) +
 80008ba:	7efb      	ldrb	r3, [r7, #27]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d801      	bhi.n	80008c4 <generateRainbow+0x1c>
 80008c0:	2319      	movs	r3, #25
 80008c2:	e000      	b.n	80008c6 <generateRainbow+0x1e>
 80008c4:	2318      	movs	r3, #24
 80008c6:	613b      	str	r3, [r7, #16]
									((colorPhase < (NUM_PIXELS % NUM_COLOR_PHASES)) ? 1 : 0);
		uint32_t colorPhasePixelIndex = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPhasePixels)
 80008cc:	e112      	b.n	8000af4 <generateRainbow+0x24c>
		{
			uint32_t pixelIndex = (colorPhaseStartIndex + colorPhasePixelIndex) % NUM_PIXELS;
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a92      	ldr	r2, [pc, #584]	; (8000b20 <generateRainbow+0x278>)
 80008d6:	fba2 1203 	umull	r1, r2, r2, r3
 80008da:	09d2      	lsrs	r2, r2, #7
 80008dc:	2193      	movs	r1, #147	; 0x93
 80008de:	fb01 f202 	mul.w	r2, r1, r2
 80008e2:	1a9b      	subs	r3, r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
			switch (colorPhase)
 80008e6:	7efb      	ldrb	r3, [r7, #27]
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	f200 80ff 	bhi.w	8000aec <generateRainbow+0x244>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <generateRainbow+0x4c>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	0800090d 	.word	0x0800090d
 80008f8:	0800095d 	.word	0x0800095d
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	080009fd 	.word	0x080009fd
 8000904:	08000a4d 	.word	0x08000a4d
 8000908:	08000a9d 	.word	0x08000a9d
			{
			case RED_TO_RED_GREEN:
				rainbowArr[pixelIndex][0] = 255;
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4413      	add	r3, r2
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 8000920:	6978      	ldr	r0, [r7, #20]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	23ff      	movs	r3, #255	; 0xff
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	2100      	movs	r1, #0
 800092c:	f7ff ffa0 	bl	8000870 <map>
 8000930:	4601      	mov	r1, r0
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	460a      	mov	r2, r1
 8000944:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 0;
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
				break;
 800095a:	e0c8      	b.n	8000aee <generateRainbow+0x246>

			case RED_GREEN_TO_GREEN:
				rainbowArr[pixelIndex][0] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 800095c:	6978      	ldr	r0, [r7, #20]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	2300      	movs	r3, #0
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	2100      	movs	r1, #0
 8000968:	f7ff ff82 	bl	8000870 <map>
 800096c:	4601      	mov	r1, r0
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	461a      	mov	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	460a      	mov	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 255;
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 0;
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
				break;
 80009aa:	e0a0      	b.n	8000aee <generateRainbow+0x246>

			case GREEN_TO_GREEN_BLUE:
				rainbowArr[pixelIndex][0] = 0;
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 255;
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4413      	add	r3, r2
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	23ff      	movs	r3, #255	; 0xff
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	f7ff ff46 	bl	8000870 <map>
 80009e4:	4601      	mov	r1, r0
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	460a      	mov	r2, r1
 80009f8:	609a      	str	r2, [r3, #8]
				break;
 80009fa:	e078      	b.n	8000aee <generateRainbow+0x246>

			case GREEN_BLUE_TO_BLUE:
				rainbowArr[pixelIndex][0] = 0;
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 8000a10:	6978      	ldr	r0, [r7, #20]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	23ff      	movs	r3, #255	; 0xff
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f7ff ff28 	bl	8000870 <map>
 8000a20:	4601      	mov	r1, r0
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	460a      	mov	r2, r1
 8000a34:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 255;
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	609a      	str	r2, [r3, #8]
				break;
 8000a4a:	e050      	b.n	8000aee <generateRainbow+0x246>

			case BLUE_TO_BLUE_RED:
				rainbowArr[pixelIndex][0] = map(colorPhasePixelIndex, 0, numPhasePixels, 0, 255);
 8000a4c:	6978      	ldr	r0, [r7, #20]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	23ff      	movs	r3, #255	; 0xff
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	f7ff ff0a 	bl	8000870 <map>
 8000a5c:	4601      	mov	r1, r0
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	460a      	mov	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 0;
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = 255;
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	609a      	str	r2, [r3, #8]
				break;
 8000a9a:	e028      	b.n	8000aee <generateRainbow+0x246>

			case BLUE_RED_TO_RED:
				rainbowArr[pixelIndex][0] = 255;
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	22ff      	movs	r2, #255	; 0xff
 8000aae:	601a      	str	r2, [r3, #0]
				rainbowArr[pixelIndex][1] = 0;
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
				rainbowArr[pixelIndex][2] = map(colorPhasePixelIndex, 0, numPhasePixels, 255, 0);
 8000ac4:	6978      	ldr	r0, [r7, #20]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	23ff      	movs	r3, #255	; 0xff
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f7ff fece 	bl	8000870 <map>
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	609a      	str	r2, [r3, #8]
				break;
 8000aea:	e000      	b.n	8000aee <generateRainbow+0x246>

			default:
				break;
 8000aec:	bf00      	nop
			}
			colorPhasePixelIndex++;
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPhasePixels)
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f4ff aee8 	bcc.w	80008ce <generateRainbow+0x26>
		}

		colorPhaseStartIndex += numPhasePixels;
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4413      	add	r3, r2
 8000b04:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 8000b06:	7efb      	ldrb	r3, [r7, #27]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	76fb      	strb	r3, [r7, #27]
 8000b0c:	7efb      	ldrb	r3, [r7, #27]
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	f67f aed3 	bls.w	80008ba <generateRainbow+0x12>
	}
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	dee95c4d 	.word	0xdee95c4d

08000b24 <rainbow>:
		  rainbowArr[NUM_PIXELS][i] = temp[i];
	  }
}

void rainbow(uint32_t patternStartIndex)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
	patternStartIndex = patternStartIndex % NUM_PIXELS;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a58      	ldr	r2, [pc, #352]	; (8000c90 <rainbow+0x16c>)
 8000b30:	fba2 1203 	umull	r1, r2, r2, r3
 8000b34:	09d2      	lsrs	r2, r2, #7
 8000b36:	2193      	movs	r1, #147	; 0x93
 8000b38:	fb01 f202 	mul.w	r2, r1, r2
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	607b      	str	r3, [r7, #4]
	uint32_t colorPhaseStartIndex = patternStartIndex;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	76fb      	strb	r3, [r7, #27]
 8000b48:	e098      	b.n	8000c7c <rainbow+0x158>
	{
		uint32_t numPixelsPerPhase = (NUM_PIXELS / NUM_COLOR_PHASES) +
 8000b4a:	7efb      	ldrb	r3, [r7, #27]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d801      	bhi.n	8000b54 <rainbow+0x30>
 8000b50:	2319      	movs	r3, #25
 8000b52:	e000      	b.n	8000b56 <rainbow+0x32>
 8000b54:	2318      	movs	r3, #24
 8000b56:	613b      	str	r3, [r7, #16]
									((colorPhase < (NUM_PIXELS % NUM_COLOR_PHASES)) ? 1 : 0);
		uint32_t colorPhasePixelIndex = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPixelsPerPhase)
 8000b5c:	e082      	b.n	8000c64 <rainbow+0x140>
		{
			uint32_t pixelIndex = (colorPhaseStartIndex + colorPhasePixelIndex) % NUM_PIXELS;
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a4a      	ldr	r2, [pc, #296]	; (8000c90 <rainbow+0x16c>)
 8000b66:	fba2 1203 	umull	r1, r2, r2, r3
 8000b6a:	09d2      	lsrs	r2, r2, #7
 8000b6c:	2193      	movs	r1, #147	; 0x93
 8000b6e:	fb01 f202 	mul.w	r2, r1, r2
 8000b72:	1a9b      	subs	r3, r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
			switch (colorPhase)
 8000b76:	7efb      	ldrb	r3, [r7, #27]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d86f      	bhi.n	8000c5c <rainbow+0x138>
 8000b7c:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <rainbow+0x60>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000b9d 	.word	0x08000b9d
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000bdd 	.word	0x08000bdd
 8000b90:	08000bfd 	.word	0x08000bfd
 8000b94:	08000c1d 	.word	0x08000c1d
 8000b98:	08000c3d 	.word	0x08000c3d
			{
			case RED_TO_RED_GREEN:
				setPixelColor(pixelIndex, 255,
										  map(colorPhasePixelIndex, 0, numPixelsPerPhase, 0, 255),
 8000b9c:	6978      	ldr	r0, [r7, #20]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f7ff fe62 	bl	8000870 <map>
 8000bac:	4603      	mov	r3, r0
				setPixelColor(pixelIndex, 255,
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	21ff      	movs	r1, #255	; 0xff
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff fe0d 	bl	80007d4 <setPixelColor>
										  0);
				break;
 8000bba:	e050      	b.n	8000c5e <rainbow+0x13a>

			case RED_GREEN_TO_GREEN:
				setPixelColor(pixelIndex, map(colorPhasePixelIndex, 0, numPixelsPerPhase, 255, 0),
 8000bbc:	6978      	ldr	r0, [r7, #20]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	23ff      	movs	r3, #255	; 0xff
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	f7ff fe52 	bl	8000870 <map>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b2d9      	uxtb	r1, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fdfd 	bl	80007d4 <setPixelColor>
										  255,
									      0);
				break;
 8000bda:	e040      	b.n	8000c5e <rainbow+0x13a>

			case GREEN_TO_GREEN_BLUE:
				setPixelColor(pixelIndex, 0,
										  255,
										  map(colorPhasePixelIndex, 0, numPixelsPerPhase, 0, 255));
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	23ff      	movs	r3, #255	; 0xff
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	f7ff fe42 	bl	8000870 <map>
 8000bec:	4603      	mov	r3, r0
				setPixelColor(pixelIndex, 0,
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f7ff fded 	bl	80007d4 <setPixelColor>
				break;
 8000bfa:	e030      	b.n	8000c5e <rainbow+0x13a>

			case GREEN_BLUE_TO_BLUE:
				setPixelColor(pixelIndex, 0,
										  map(colorPhasePixelIndex, 0, numPixelsPerPhase, 255, 0),
 8000bfc:	6978      	ldr	r0, [r7, #20]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	23ff      	movs	r3, #255	; 0xff
 8000c06:	2100      	movs	r1, #0
 8000c08:	f7ff fe32 	bl	8000870 <map>
 8000c0c:	4603      	mov	r3, r0
				setPixelColor(pixelIndex, 0,
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	23ff      	movs	r3, #255	; 0xff
 8000c12:	2100      	movs	r1, #0
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f7ff fddd 	bl	80007d4 <setPixelColor>
										  255);
				break;
 8000c1a:	e020      	b.n	8000c5e <rainbow+0x13a>

			case BLUE_TO_BLUE_RED:
				setPixelColor(pixelIndex, map(colorPhasePixelIndex, 0, numPixelsPerPhase, 0, 255),
 8000c1c:	6978      	ldr	r0, [r7, #20]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	23ff      	movs	r3, #255	; 0xff
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	f7ff fe22 	bl	8000870 <map>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b2d9      	uxtb	r1, r3
 8000c30:	23ff      	movs	r3, #255	; 0xff
 8000c32:	2200      	movs	r2, #0
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fdcd 	bl	80007d4 <setPixelColor>
										  0,
										  255);
				break;
 8000c3a:	e010      	b.n	8000c5e <rainbow+0x13a>

			case BLUE_RED_TO_RED:
				setPixelColor(pixelIndex, 255,
										  0,
										  map(colorPhasePixelIndex, 0, numPixelsPerPhase, 255, 0));
 8000c3c:	6978      	ldr	r0, [r7, #20]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	2300      	movs	r3, #0
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	23ff      	movs	r3, #255	; 0xff
 8000c46:	2100      	movs	r1, #0
 8000c48:	f7ff fe12 	bl	8000870 <map>
 8000c4c:	4603      	mov	r3, r0
				setPixelColor(pixelIndex, 255,
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f7ff fdbd 	bl	80007d4 <setPixelColor>
				break;
 8000c5a:	e000      	b.n	8000c5e <rainbow+0x13a>

			default:
				break;
 8000c5c:	bf00      	nop
			}
			colorPhasePixelIndex++;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
		while (colorPhasePixelIndex < numPixelsPerPhase)
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f4ff af78 	bcc.w	8000b5e <rainbow+0x3a>
		}

		colorPhaseStartIndex += numPixelsPerPhase;
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4413      	add	r3, r2
 8000c74:	61fb      	str	r3, [r7, #28]
	for (colorPhase_E colorPhase = RED_TO_RED_GREEN; colorPhase <= NUM_COLOR_PHASES; colorPhase++)
 8000c76:	7efb      	ldrb	r3, [r7, #27]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	76fb      	strb	r3, [r7, #27]
 8000c7c:	7efb      	ldrb	r3, [r7, #27]
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	f67f af63 	bls.w	8000b4a <rainbow+0x26>
	}
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	dee95c4d 	.word	0xdee95c4d

08000c94 <rpmProgressBar>:
//	}
//}

void rpmProgressBar(uint32_t percent, uint8_t redStart, uint8_t greenStart, uint8_t blueStart,
											uint8_t redEnd, uint8_t greenEnd, uint8_t blueEnd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70bb      	strb	r3, [r7, #2]
 8000caa:	4613      	mov	r3, r2
 8000cac:	707b      	strb	r3, [r7, #1]
	clear();
 8000cae:	f7ff fce3 	bl	8000678 <clear>
	if (percent > 100) percent =100;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b64      	cmp	r3, #100	; 0x64
 8000cb6:	d901      	bls.n	8000cbc <rpmProgressBar+0x28>
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	607b      	str	r3, [r7, #4]
	uint32_t numLeds = (percent * NUM_PIXELS) / 100;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2293      	movs	r2, #147	; 0x93
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <rpmProgressBar+0xf8>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	617b      	str	r3, [r7, #20]
	uint32_t startGradient = NUM_PIXELS / 5;
 8000cce:	231d      	movs	r3, #29
 8000cd0:	613b      	str	r3, [r7, #16]
	uint32_t endGradient = NUM_PIXELS - NUM_PIXELS / 5;
 8000cd2:	2376      	movs	r3, #118	; 0x76
 8000cd4:	60fb      	str	r3, [r7, #12]
	for (int ledIndex = 0; ledIndex < numLeds; ledIndex++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e04e      	b.n	8000d7a <rpmProgressBar+0xe6>
	{
		uint8_t red = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	76fb      	strb	r3, [r7, #27]
		uint8_t green = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	76bb      	strb	r3, [r7, #26]
		uint8_t blue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	767b      	strb	r3, [r7, #25]
		if(ledIndex < startGradient)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d906      	bls.n	8000cfe <rpmProgressBar+0x6a>
		{
			red = redStart;
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	76fb      	strb	r3, [r7, #27]
			green = greenStart;
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	76bb      	strb	r3, [r7, #26]
			blue = blueStart;
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	767b      	strb	r3, [r7, #25]
 8000cfc:	e031      	b.n	8000d62 <rpmProgressBar+0xce>
		}
		else if(ledIndex > endGradient)
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d209      	bcs.n	8000d1a <rpmProgressBar+0x86>
		{
			red = redEnd;
 8000d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d0a:	76fb      	strb	r3, [r7, #27]
			green = greenEnd;
 8000d0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d10:	76bb      	strb	r3, [r7, #26]
			blue = blueEnd;
 8000d12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d16:	767b      	strb	r3, [r7, #25]
 8000d18:	e023      	b.n	8000d62 <rpmProgressBar+0xce>
		}
		else
		{
			red   = map(ledIndex, startGradient, endGradient, redStart, redEnd);
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	78f8      	ldrb	r0, [r7, #3]
 8000d20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4603      	mov	r3, r0
 8000d28:	69f8      	ldr	r0, [r7, #28]
 8000d2a:	f7ff fda1 	bl	8000870 <map>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	76fb      	strb	r3, [r7, #27]
			green = map(ledIndex, startGradient, endGradient, greenStart, greenEnd);
 8000d32:	6939      	ldr	r1, [r7, #16]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	78b8      	ldrb	r0, [r7, #2]
 8000d38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	69f8      	ldr	r0, [r7, #28]
 8000d42:	f7ff fd95 	bl	8000870 <map>
 8000d46:	4603      	mov	r3, r0
 8000d48:	76bb      	strb	r3, [r7, #26]
			blue  = map(ledIndex, startGradient, endGradient, blueStart, blueEnd);
 8000d4a:	6939      	ldr	r1, [r7, #16]
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	7878      	ldrb	r0, [r7, #1]
 8000d50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	4603      	mov	r3, r0
 8000d58:	69f8      	ldr	r0, [r7, #28]
 8000d5a:	f7ff fd89 	bl	8000870 <map>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	767b      	strb	r3, [r7, #25]
		}
		setPixelColor(NUM_PIXELS - ledIndex, red, green, blue);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f1c3 0393 	rsb	r3, r3, #147	; 0x93
 8000d68:	4618      	mov	r0, r3
 8000d6a:	7e7b      	ldrb	r3, [r7, #25]
 8000d6c:	7eba      	ldrb	r2, [r7, #26]
 8000d6e:	7ef9      	ldrb	r1, [r7, #27]
 8000d70:	f7ff fd30 	bl	80007d4 <setPixelColor>
	for (int ledIndex = 0; ledIndex < numLeds; ledIndex++)
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	3301      	adds	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d8ac      	bhi.n	8000cdc <rpmProgressBar+0x48>
	}
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	51eb851f 	.word	0x51eb851f

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b08e      	sub	sp, #56	; 0x38
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f001 fcfd 	bl	8002794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f841 	bl	8000e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 fa1d 	bl	80011dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000da2:	f000 f9f3 	bl	800118c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000da6:	f000 f9c7 	bl	8001138 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000daa:	f000 f8a5 	bl	8000ef8 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000dae:	f000 f8d9 	bl	8000f64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000db2:	f000 f94b 	bl	800104c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init(&hcan1);
 8000db6:	4815      	ldr	r0, [pc, #84]	; (8000e0c <main+0x7c>)
 8000db8:	f7ff fbac 	bl	8000514 <init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskMain_Loop */
  osThreadDef(taskMain_Loop, task_main_loop, osPriorityNormal, 0, 256);
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <main+0x80>)
 8000dbe:	f107 041c 	add.w	r4, r7, #28
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskMain_LoopHandle = osThreadCreate(osThread(taskMain_Loop), NULL);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fd01 	bl	80067de <osThreadCreate>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <main+0x84>)
 8000de0:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskGCAN_Hardwa */
  osThreadDef(taskGCAN_Hardwa, task_gcan_hw, osPriorityNormal, 0, 256);
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <main+0x88>)
 8000de4:	463c      	mov	r4, r7
 8000de6:	461d      	mov	r5, r3
 8000de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskGCAN_HardwaHandle = osThreadCreate(osThread(taskGCAN_Hardwa), NULL);
 8000df4:	463b      	mov	r3, r7
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fcf0 	bl	80067de <osThreadCreate>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <main+0x8c>)
 8000e02:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e04:	f005 fce4 	bl	80067d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <main+0x78>
 8000e0a:	bf00      	nop
 8000e0c:	20002df8 	.word	0x20002df8
 8000e10:	08007ea4 	.word	0x08007ea4
 8000e14:	20002fb4 	.word	0x20002fb4
 8000e18:	08007ec0 	.word	0x08007ec0
 8000e1c:	20002fb8 	.word	0x20002fb8

08000e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2234      	movs	r2, #52	; 0x34
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 ff52 	bl	8007cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <SystemClock_Config+0xd4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <SystemClock_Config+0xd4>)
 8000e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <SystemClock_Config+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e84:	2310      	movs	r3, #16
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000e94:	23a0      	movs	r3, #160	; 0xa0
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fcf9 	bl	80048a0 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eb4:	f000 fa18 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb8:	230f      	movs	r3, #15
 8000eba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ece:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f966 	bl	80041a8 <HAL_RCC_ClockConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ee2:	f000 fa01 	bl	80012e8 <Error_Handler>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3750      	adds	r7, #80	; 0x50
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40007000 	.word	0x40007000

08000ef8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <MX_CAN1_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f04:	2205      	movs	r2, #5
 8000f06:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f16:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000f1a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_CAN1_Init+0x64>)
 8000f48:	f001 fc8e 	bl	8002868 <HAL_CAN_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f52:	f000 f9c9 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20002df8 	.word	0x20002df8
 8000f60:	40006400 	.word	0x40006400

08000f64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	f107 0320 	add.w	r3, r7, #32
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 112;
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000faa:	2270      	movs	r2, #112	; 0x70
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000fbc:	f003 ff0e 	bl	8004ddc <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000fc6:	f000 f98f 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000fd8:	f004 fbac 	bl	8005734 <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000fe2:	f000 f981 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM2_Init+0xe4>)
 8000fe8:	f003 ffb8 	bl	8004f5c <HAL_TIM_PWM_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ff2:	f000 f979 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4619      	mov	r1, r3
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <MX_TIM2_Init+0xe4>)
 8001006:	f005 f879 	bl	80060fc <HAL_TIMEx_MasterConfigSynchronization>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001010:	f000 f96a 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001014:	2360      	movs	r3, #96	; 0x60
 8001016:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	220c      	movs	r2, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM2_Init+0xe4>)
 800102c:	f004 fac0 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001036:	f000 f957 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM2_Init+0xe4>)
 800103c:	f000 fa8e 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	; 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20002e20 	.word	0x20002e20

0800104c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_TIM3_Init+0xe4>)
 800107e:	4a2d      	ldr	r2, [pc, #180]	; (8001134 <MX_TIM3_Init+0xe8>)
 8001080:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <MX_TIM3_Init+0xe4>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_TIM3_Init+0xe4>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 112;
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <MX_TIM3_Init+0xe4>)
 8001090:	2270      	movs	r2, #112	; 0x70
 8001092:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_TIM3_Init+0xe4>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <MX_TIM3_Init+0xe4>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010a0:	4823      	ldr	r0, [pc, #140]	; (8001130 <MX_TIM3_Init+0xe4>)
 80010a2:	f003 fe9b 	bl	8004ddc <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010ac:	f000 f91c 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	4619      	mov	r1, r3
 80010bc:	481c      	ldr	r0, [pc, #112]	; (8001130 <MX_TIM3_Init+0xe4>)
 80010be:	f004 fb39 	bl	8005734 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010c8:	f000 f90e 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_TIM3_Init+0xe4>)
 80010ce:	f003 ff45 	bl	8004f5c <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80010d8:	f000 f906 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_TIM3_Init+0xe4>)
 80010ec:	f005 f806 	bl	80060fc <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010f6:	f000 f8f7 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fa:	2360      	movs	r3, #96	; 0x60
 80010fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	220c      	movs	r2, #12
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <MX_TIM3_Init+0xe4>)
 8001112:	f004 fa4d 	bl	80055b0 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800111c:	f000 f8e4 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <MX_TIM3_Init+0xe4>)
 8001122:	f000 fa1b 	bl	800155c <HAL_TIM_MspPostInit>

}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	; 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20002e68 	.word	0x20002e68
 8001134:	40000400 	.word	0x40000400

08001138 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART2_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART2_UART_Init+0x4c>)
 8001170:	f005 f854 	bl	800621c <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 f8b5 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20002f70 	.word	0x20002f70
 8001188:	40004400 	.word	0x40004400

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_DMA_Init+0x4c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <MX_DMA_Init+0x4c>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_DMA_Init+0x4c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2105      	movs	r1, #5
 80011b2:	200d      	movs	r0, #13
 80011b4:	f002 fab0 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011b8:	200d      	movs	r0, #13
 80011ba:	f002 fac9 	bl	8003750 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2105      	movs	r1, #5
 80011c2:	202f      	movs	r0, #47	; 0x2f
 80011c4:	f002 faa8 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80011c8:	202f      	movs	r0, #47	; 0x2f
 80011ca:	f002 fac1 	bl	8003750 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <MX_GPIO_Init+0xb4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a25      	ldr	r2, [pc, #148]	; (8001290 <MX_GPIO_Init+0xb4>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_GPIO_Init+0xb4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_GPIO_Init+0xb4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <MX_GPIO_Init+0xb4>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_GPIO_Init+0xb4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_GPIO_Init+0xb4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <MX_GPIO_Init+0xb4>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_GPIO_Init+0xb4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2120      	movs	r1, #32
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <MX_GPIO_Init+0xb8>)
 800124c:	f002 ff92 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_GPIO_Init+0xbc>)
 8001266:	f002 fdf1 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800126a:	2320      	movs	r3, #32
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_GPIO_Init+0xb8>)
 8001282:	f002 fde3 	bl	8003e4c <HAL_GPIO_Init>

}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020800 	.word	0x40020800

0800129c <task_main_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main_loop */
void task_main_loop(void const * argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  main_loop();
 80012a4:	f7ff f96a 	bl	800057c <main_loop>
    osDelay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f005 fae4 	bl	8006876 <osDelay>
	  main_loop();
 80012ae:	e7f9      	b.n	80012a4 <task_main_loop+0x8>

080012b0 <task_gcan_hw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gcan_hw */
void task_gcan_hw(void const * argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gcan_hw */
  /* Infinite loop */
  for(;;)
  {
	  can_buffer_handling_loop();
 80012b8:	f7ff f952 	bl	8000560 <can_buffer_handling_loop>
    osDelay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f005 fada 	bl	8006876 <osDelay>
	  can_buffer_handling_loop();
 80012c2:	e7f9      	b.n	80012b8 <task_gcan_hw+0x8>

080012c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012d6:	f001 fa7f 	bl	80027d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40001000 	.word	0x40001000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_MspInit+0x54>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a11      	ldr	r2, [pc, #68]	; (8001348 <HAL_MspInit+0x54>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x54>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_MspInit+0x54>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_MspInit+0x54>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MspInit+0x54>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	210f      	movs	r1, #15
 8001336:	f06f 0001 	mvn.w	r0, #1
 800133a:	f002 f9ed 	bl	8003718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_CAN_MspInit+0xb4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d144      	bne.n	80013f8 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <HAL_CAN_MspInit+0xb8>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a23      	ldr	r2, [pc, #140]	; (8001404 <HAL_CAN_MspInit+0xb8>)
 8001378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_CAN_MspInit+0xb8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <HAL_CAN_MspInit+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_CAN_MspInit+0xb8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_CAN_MspInit+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013b8:	2309      	movs	r3, #9
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <HAL_CAN_MspInit+0xbc>)
 80013c4:	f002 fd42 	bl	8003e4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2105      	movs	r1, #5
 80013cc:	2013      	movs	r0, #19
 80013ce:	f002 f9a3 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80013d2:	2013      	movs	r0, #19
 80013d4:	f002 f9bc 	bl	8003750 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	2014      	movs	r0, #20
 80013de:	f002 f99b 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013e2:	2014      	movs	r0, #20
 80013e4:	f002 f9b4 	bl	8003750 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2105      	movs	r1, #5
 80013ec:	2015      	movs	r0, #21
 80013ee:	f002 f993 	bl	8003718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80013f2:	2015      	movs	r0, #21
 80013f4:	f002 f9ac 	bl	8003750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40006400 	.word	0x40006400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d144      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b45      	ldr	r3, [pc, #276]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH4 Init */
    hdma_tim2_up_ch4.Instance = DMA1_Stream7;
 800143a:	4b43      	ldr	r3, [pc, #268]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800143c:	4a43      	ldr	r2, [pc, #268]	; (800154c <HAL_TIM_Base_MspInit+0x140>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch4.Init.Channel = DMA_CHANNEL_3;
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001442:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001446:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800145e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001462:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch4.Init.Mode = DMA_NORMAL;
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	4b35      	ldr	r3, [pc, #212]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch4) != HAL_OK)
 800147e:	4832      	ldr	r0, [pc, #200]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001480:	f002 f974 	bl	800376c <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800148a:	f7ff ff2d 	bl	80012e8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch4);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001492:	621a      	str	r2, [r3, #32]
 8001494:	4a2c      	ldr	r2, [pc, #176]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_up_ch4);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_TIM_Base_MspInit+0x13c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014a6:	e048      	b.n	800153a <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_TIM_Base_MspInit+0x144>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d143      	bne.n	800153a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_TIM_Base_MspInit+0x138>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_TIM_Base_MspInit+0x14c>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014d6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014da:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 80014fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001512:	4810      	ldr	r0, [pc, #64]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 8001514:	f002 f92a 	bl	800376c <HAL_DMA_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 800151e:	f7ff fee3 	bl	80012e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 8001532:	621a      	str	r2, [r3, #32]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_TIM_Base_MspInit+0x148>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	; 0x38
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	20002eb0 	.word	0x20002eb0
 800154c:	400260b8 	.word	0x400260b8
 8001550:	40000400 	.word	0x40000400
 8001554:	20002f10 	.word	0x20002f10
 8001558:	40026040 	.word	0x40026040

0800155c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d11e      	bne.n	80015bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_TIM_MspPostInit+0xb0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a21      	ldr	r2, [pc, #132]	; (800160c <HAL_TIM_MspPostInit+0xb0>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_TIM_MspPostInit+0xb0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PIXELS2_Pin;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015aa:	2301      	movs	r3, #1
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PIXELS2_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4816      	ldr	r0, [pc, #88]	; (8001610 <HAL_TIM_MspPostInit+0xb4>)
 80015b6:	f002 fc49 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015ba:	e023      	b.n	8001604 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_TIM_MspPostInit+0xb8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d11e      	bne.n	8001604 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_TIM_MspPostInit+0xb0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_TIM_MspPostInit+0xb0>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_TIM_MspPostInit+0xb0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PIXELS_Pin;
 80015e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f4:	2302      	movs	r3, #2
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PIXELS_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_TIM_MspPostInit+0xbc>)
 8001600:	f002 fc24 	bl	8003e4c <HAL_GPIO_Init>
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400
 8001614:	40000400 	.word	0x40000400
 8001618:	40020800 	.word	0x40020800

0800161c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_UART_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12b      	bne.n	8001696 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_UART_MspInit+0x88>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_UART_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001676:	230c      	movs	r3, #12
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001686:	2307      	movs	r3, #7
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_UART_MspInit+0x8c>)
 8001692:	f002 fbdb 	bl	8003e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_InitTick+0xe4>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a32      	ldr	r2, [pc, #200]	; (8001790 <HAL_InitTick+0xe4>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_InitTick+0xe4>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d8:	f107 0210 	add.w	r2, r7, #16
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fe7a 	bl	80043dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016f2:	f002 fe4b 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 80016f6:	6378      	str	r0, [r7, #52]	; 0x34
 80016f8:	e004      	b.n	8001704 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016fa:	f002 fe47 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 80016fe:	4603      	mov	r3, r0
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_InitTick+0xe8>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9b      	lsrs	r3, r3, #18
 800170e:	3b01      	subs	r3, #1
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_InitTick+0xec>)
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <HAL_InitTick+0xf0>)
 8001716:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_InitTick+0xec>)
 800171a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_InitTick+0xec>)
 8001722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001724:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_InitTick+0xec>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_InitTick+0xec>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_InitTick+0xec>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001738:	4817      	ldr	r0, [pc, #92]	; (8001798 <HAL_InitTick+0xec>)
 800173a:	f003 fb4f 	bl	8004ddc <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001744:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001748:	2b00      	cmp	r3, #0
 800174a:	d11b      	bne.n	8001784 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800174c:	4812      	ldr	r0, [pc, #72]	; (8001798 <HAL_InitTick+0xec>)
 800174e:	f003 fb95 	bl	8004e7c <HAL_TIM_Base_Start_IT>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001758:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175c:	2b00      	cmp	r3, #0
 800175e:	d111      	bne.n	8001784 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001760:	2036      	movs	r0, #54	; 0x36
 8001762:	f001 fff5 	bl	8003750 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d808      	bhi.n	800177e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	2036      	movs	r0, #54	; 0x36
 8001772:	f001 ffd1 	bl	8003718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_InitTick+0xf4>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e002      	b.n	8001784 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001784:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001788:	4618      	mov	r0, r3
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	431bde83 	.word	0x431bde83
 8001798:	20002fbc 	.word	0x20002fbc
 800179c:	40001000 	.word	0x40001000
 80017a0:	200003bc 	.word	0x200003bc

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA1_Stream2_IRQHandler+0x10>)
 80017d6:	f002 f8cf 	bl	8003978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20002f10 	.word	0x20002f10

080017e4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <CAN1_TX_IRQHandler+0x10>)
 80017ea:	f001 fcf4 	bl	80031d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20002df8 	.word	0x20002df8

080017f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <CAN1_RX0_IRQHandler+0x10>)
 80017fe:	f001 fcea 	bl	80031d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20002df8 	.word	0x20002df8

0800180c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <CAN1_RX1_IRQHandler+0x10>)
 8001812:	f001 fce0 	bl	80031d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20002df8 	.word	0x20002df8

08001820 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch4);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <DMA1_Stream7_IRQHandler+0x10>)
 8001826:	f002 f8a7 	bl	8003978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20002eb0 	.word	0x20002eb0

08001834 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM6_DAC_IRQHandler+0x10>)
 800183a:	f003 fdb1 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20002fbc 	.word	0x20002fbc

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480d      	ldr	r0, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001872:	490e      	ldr	r1, [pc, #56]	; (80018ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001888:	4c0b      	ldr	r4, [pc, #44]	; (80018b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001896:	f7ff ffd7 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f006 f9f7 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fa77 	bl	8000d90 <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 80018b0:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 80018b4:	2000042c 	.word	0x2000042c
  ldr r4, =_ebss
 80018b8:	20007a88 	.word	0x20007a88

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <init_can>:
//  MODULE_ID module_id:     what module this is (ex. PDM_ID, ACM_ID)
//  BXCAN_TYPE bx_type:      master or slave BXcan type. This is usually BXTYPE_MASTER
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
 80018cc:	4613      	mov	r3, r2
 80018ce:	70bb      	strb	r3, [r7, #2]
	U8 c;

	// set the current module
	this_module_id = module_id;
 80018d0:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <init_can+0xe8>)
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	7013      	strb	r3, [r2, #0]


	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 80018d6:	2001      	movs	r0, #1
 80018d8:	f000 ff9e 	bl	8002818 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 80018dc:	2220      	movs	r2, #32
 80018de:	4933      	ldr	r1, [pc, #204]	; (80019ac <init_can+0xec>)
 80018e0:	4833      	ldr	r0, [pc, #204]	; (80019b0 <init_can+0xf0>)
 80018e2:	f000 fe7b 	bl	80025dc <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 80018e6:	2220      	movs	r2, #32
 80018e8:	4932      	ldr	r1, [pc, #200]	; (80019b4 <init_can+0xf4>)
 80018ea:	4833      	ldr	r0, [pc, #204]	; (80019b8 <init_can+0xf8>)
 80018ec:	f000 fe76 	bl	80025dc <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif // NUM_OF_BUSSES > 2
#endif // MULTI_BUS

	// init all of the parameter data
	init_all_params();
 80018f0:	f000 f868 	bl	80019c4 <init_all_params>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e01f      	b.n	800193a <init_can+0x7a>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	492f      	ldr	r1, [pc, #188]	; (80019bc <init_can+0xfc>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	4a2d      	ldr	r2, [pc, #180]	; (80019c0 <init_can+0x100>)
 800190a:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	492b      	ldr	r1, [pc, #172]	; (80019bc <init_can+0xfc>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	3304      	adds	r3, #4
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	4926      	ldr	r1, [pc, #152]	; (80019bc <init_can+0xfc>)
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3308      	adds	r3, #8
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	3301      	adds	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	2b07      	cmp	r3, #7
 800193e:	d9dc      	bls.n	80018fa <init_can+0x3a>

	}

	if (init_filters(hcan, bx_type))
 8001940:	78bb      	ldrb	r3, [r7, #2]
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f887 	bl	8001a58 <init_filters>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <init_can+0x96>
	{
		return FILTER_SET_FAILED;
 8001950:	f06f 0304 	mvn.w	r3, #4
 8001954:	e024      	b.n	80019a0 <init_can+0xe0>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8001956:	2102      	movs	r1, #2
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 fbef 	bl	800313c <HAL_CAN_ActivateNotification>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d106      	bne.n	8001972 <init_can+0xb2>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001964:	2110      	movs	r1, #16
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 fbe8 	bl	800313c <HAL_CAN_ActivateNotification>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <init_can+0xb8>
	{
		return IRQ_SET_FAILED;
 8001972:	f06f 0305 	mvn.w	r3, #5
 8001976:	e013      	b.n	80019a0 <init_can+0xe0>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX || TARGET == F4XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001978:	2101      	movs	r1, #1
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f001 fbde 	bl	800313c <HAL_CAN_ActivateNotification>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <init_can+0xcc>
	{
		return IRQ_SET_FAILED;
 8001986:	f06f 0305 	mvn.w	r3, #5
 800198a:	e009      	b.n	80019a0 <init_can+0xe0>
	}
#endif // TARGET == F7XX || TARGET == F4XX

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f001 f947 	bl	8002c20 <HAL_CAN_Start>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <init_can+0xde>
	{
		return CAN_START_FAILED;
 8001998:	f06f 0306 	mvn.w	r3, #6
 800199c:	e000      	b.n	80019a0 <init_can+0xe0>
	}

	return CAN_SUCCESS;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20003064 	.word	0x20003064
 80019ac:	20003080 	.word	0x20003080
 80019b0:	20003078 	.word	0x20003078
 80019b4:	20003288 	.word	0x20003288
 80019b8:	20003280 	.word	0x20003280
 80019bc:	20003004 	.word	0x20003004
 80019c0:	080025b9 	.word	0x080025b9

080019c4 <init_all_params>:


// init_all_params
//  function to run through each parameter and set the default data in the struct
static void init_all_params(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
	U16 c;
	CAN_INFO_STRUCT* data_struct;

	// set the param id for CAN commands
	can_command.param_id = CAN_COMMAND_ID;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <init_all_params+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	719a      	strb	r2, [r3, #6]

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 80019d0:	2301      	movs	r3, #1
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	e014      	b.n	8001a00 <init_all_params+0x3c>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <init_all_params+0x54>)
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	603b      	str	r3, [r7, #0]

		data_struct->last_rx = 0;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	715a      	strb	r2, [r3, #5]

		// set the ID for each parameter
		data_struct->param_id = c;
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	719a      	strb	r2, [r3, #6]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	3301      	adds	r3, #1
 80019fe:	80fb      	strh	r3, [r7, #6]
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2bbc      	cmp	r3, #188	; 0xbc
 8001a04:	d9e7      	bls.n	80019d6 <init_all_params+0x12>
	}
}
 8001a06:	bf00      	nop
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	20003488 	.word	0x20003488
 8001a18:	20000008 	.word	0x20000008

08001a1c <set_all_params_state>:
//  Function to set each parameter in gopherCAN to enabled(true) or disabled (false). This
//  is easier than manually enabling all of them.
// params:
//  boolean enabled: the state to set all of the parameters to
void set_all_params_state(boolean enabled)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	U16 c;

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001a26:	2301      	movs	r3, #1
 8001a28:	81fb      	strh	r3, [r7, #14]
 8001a2a:	e008      	b.n	8001a3e <set_all_params_state+0x22>
	{
		((CAN_INFO_STRUCT*)(all_parameter_structs[c]))->update_enabled = enabled;
 8001a2c:	89fb      	ldrh	r3, [r7, #14]
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <set_all_params_state+0x38>)
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	711a      	strb	r2, [r3, #4]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	81fb      	strh	r3, [r7, #14]
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
 8001a40:	2bbc      	cmp	r3, #188	; 0xbc
 8001a42:	d9f3      	bls.n	8001a2c <set_all_params_state+0x10>
	}
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b092      	sub	sp, #72	; 0x48
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (bx_type == BXTYPE_SLAVE)
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 8001a70:	230e      	movs	r3, #14
 8001a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	U32 filt_id_high;
	U32 filt_mask_high;
	U32 filt_mask_low;

	// get the correct bits from the id and mask for each part of the ID.
	filt_id_high = GET_ID_HIGH(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <init_filters+0x10c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	065b      	lsls	r3, r3, #25
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
	filt_id_low = GET_ID_LOW(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8001a80:	2304      	movs	r3, #4
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 8001a84:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
    filt_mask_low = GET_ID_LOW(DEST_MASK);
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34

	// Set the the parameters on the filter struct (FIFO0)
	filterConfig.FilterBank = banknum;                                // Modify bank 0 (of 13)
 8001a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a92:	623b      	str	r3, [r7, #32]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 8001a94:	2301      	movs	r3, #1
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterIdLow = filt_id_low;                           // Low bound of accepted values
 8001aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa6:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;                         // High bound of accepted values
 8001aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aaa:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;                     // Which bits matter when filtering (high)
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;                   // Which bits matter when filtering (low)
 8001ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab2:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 ffd0 	bl	8002a60 <HAL_CAN_ConfigFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <init_filters+0x74>
	{
		return FILTER_SET_FAILED;
 8001ac6:	f06f 0304 	mvn.w	r3, #4
 8001aca:	e047      	b.n	8001b5c <init_filters+0x104>
	}

	// Set the the parameters on the filter struct (FIFO1)
	// all other parameters are the same as FIFO0
	filterConfig.FilterBank = banknum + 1;                            // Modify bank 1 (of 13)
 8001acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;             // use FIFO1
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 ffbe 	bl	8002a60 <HAL_CAN_ConfigFilter>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <init_filters+0x98>
	{
		return FILTER_SET_FAILED;
 8001aea:	f06f 0304 	mvn.w	r3, #4
 8001aee:	e035      	b.n	8001b5c <init_filters+0x104>
	}

	// get the correct bits from the id and mask for each part of the ID for adding the general CAN ID
	filt_id_high = GET_ID_HIGH(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8001af0:	2300      	movs	r3, #0
 8001af2:	643b      	str	r3, [r7, #64]	; 0x40
	filt_id_low = GET_ID_LOW(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8001af4:	2304      	movs	r3, #4
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 8001af8:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
	filt_mask_low = GET_ID_LOW(DEST_MASK);
 8001afe:	2304      	movs	r3, #4
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34

	// Set the the parameters on the filter struct (FIFO0)
	filterConfig.FilterBank = banknum + 2;                            // Modify bank 2 (of 13)
 8001b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b06:	3302      	adds	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterIdLow = filt_id_low;                           // Low bound of accepted values
 8001b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b10:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;                         // High bound of accepted values
 8001b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b14:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;                     // Which bits matter when filtering (high)
 8001b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b18:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;                   // Which bits matter when filtering (low)
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1c:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 ff9b 	bl	8002a60 <HAL_CAN_ConfigFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <init_filters+0xde>
	{
		return FILTER_SET_FAILED;
 8001b30:	f06f 0304 	mvn.w	r3, #4
 8001b34:	e012      	b.n	8001b5c <init_filters+0x104>
	}

	// Set the the parameters on the filter struct (FIFO1)
	// all other parameters are the same as FIFO0
	filterConfig.FilterBank = banknum + 3;                            // Modify bank 3 (of 13)
 8001b36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;             // use FIFO1
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 ff89 	bl	8002a60 <HAL_CAN_ConfigFilter>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <init_filters+0x102>
	{
		return FILTER_SET_FAILED;
 8001b54:	f06f 0304 	mvn.w	r3, #4
 8001b58:	e000      	b.n	8001b5c <init_filters+0x104>
	}
#endif // CAN_ROUTER

	return CAN_SUCCESS;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3748      	adds	r7, #72	; 0x48
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20003064 	.word	0x20003064

08001b68 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    FIFO0_RX_CALLBACK
 8001b70:	2100      	movs	r1, #0
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f9e6 	bl	8001f44 <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO0);
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
    FIFO1_RX_CALLBACK
 8001b88:	2101      	movs	r1, #1
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f9da 	bl	8001f44 <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO1);
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <request_parameter>:
//  MODULE_ID dest_module:    what module to request the parameter from
//  GCAN_PARAM_ID parameter:  what parameter to request
// returns:
//  error codes specified in GopherCAN.h
S8 request_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	71bb      	strb	r3, [r7, #6]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	717b      	strb	r3, [r7, #5]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d902      	bls.n	8001bb6 <request_parameter+0x1e>
	{
		return BAD_MODULE_ID;
 8001bb0:	f06f 0301 	mvn.w	r3, #1
 8001bb4:	e02c      	b.n	8001c10 <request_parameter+0x78>
	}

	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8001bb6:	797b      	ldrb	r3, [r7, #5]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <request_parameter+0x2a>
 8001bbc:	797b      	ldrb	r3, [r7, #5]
 8001bbe:	2bbc      	cmp	r3, #188	; 0xbc
 8001bc0:	d902      	bls.n	8001bc8 <request_parameter+0x30>
	{
		return BAD_PARAMETER_ID;
 8001bc2:	f06f 0302 	mvn.w	r3, #2
 8001bc6:	e023      	b.n	8001c10 <request_parameter+0x78>
	}

	id.priority = priority;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <request_parameter+0x80>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	72fb      	strb	r3, [r7, #11]
	id.parameter = parameter;
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 8001be0:	f107 0208 	add.w	r2, r7, #8
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fbdc 	bl	80023a8 <build_message_id>

	// set the RTR bit to REQUEST_DATA
	message.rtr_bit = REQUEST_DATA;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	753b      	strb	r3, [r7, #20]

	message.dlc = REQ_PARAM_SIZE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	757b      	strb	r3, [r7, #21]

	// set the pending response to true for this parameter, will be set to true once
	// the value is received from the CAN bus
	((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->pending_response = TRUE;
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <request_parameter+0x84>)
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	2201      	movs	r2, #1
 8001c02:	715a      	strb	r2, [r3, #5]

	return tx_can_message(&message);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fa11 	bl	8002030 <tx_can_message>
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20003064 	.word	0x20003064
 8001c1c:	20000008 	.word	0x20000008

08001c20 <send_parameter>:
//  MODULE_ID dest_module:    what module to send the parameter to
//  GCAN_PARAM_ID parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 8001c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c24:	b09a      	sub	sp, #104	; 0x68
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c2e:	460b      	mov	r3, r1
 8001c30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c34:	4613      	mov	r3, r2
 8001c36:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8001c46:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <send_parameter+0x36>
 8001c4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c52:	2bbc      	cmp	r3, #188	; 0xbc
 8001c54:	d902      	bls.n	8001c5c <send_parameter+0x3c>
	{
		return BAD_PARAMETER_ID;
 8001c56:	f06f 0302 	mvn.w	r3, #2
 8001c5a:	e115      	b.n	8001e88 <send_parameter+0x268>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 8001c5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <send_parameter+0x274>)
 8001c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <send_parameter+0x52>
	{
		return NOT_ENABLED_ERR;
 8001c6c:	f06f 030a 	mvn.w	r3, #10
 8001c70:	e10a      	b.n	8001e88 <send_parameter+0x268>
	}

	// build the return message ID
	id.priority = priority;
 8001c72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c76:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	id.dest_module = dest_module;
 8001c7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c7e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	id.source_module = this_module_id;
 8001c82:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <send_parameter+0x278>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	id.error = FALSE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	id.parameter = parameter;
 8001c90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	build_message_id(&message, &id);
 8001c9a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fb7f 	bl	80023a8 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 8001cb0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001cb4:	4b79      	ldr	r3, [pc, #484]	; (8001e9c <send_parameter+0x27c>)
 8001cb6:	5c9b      	ldrb	r3, [r3, r2]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <send_parameter+0xa8>
		|| parameter_data_types[parameter] == SIGNED8)
 8001cbc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001cc0:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <send_parameter+0x27c>)
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d115      	bne.n	8001cf4 <send_parameter+0xd4>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001cc8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001ccc:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <send_parameter+0x274>)
 8001cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd2:	79db      	ldrb	r3, [r3, #7]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	461c      	mov	r4, r3
 8001cda:	4615      	mov	r5, r2
 8001cdc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ce0:	ea42 0a04 	orr.w	sl, r2, r4
 8001ce4:	ea43 0b05 	orr.w	fp, r3, r5
 8001ce8:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
		message.dlc = sizeof(U8);
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001cf2:	e092      	b.n	8001e1a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 8001cf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001cf8:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <send_parameter+0x27c>)
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d005      	beq.n	8001d0c <send_parameter+0xec>
		|| parameter_data_types[parameter] == SIGNED16)
 8001d00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001d04:	4b65      	ldr	r3, [pc, #404]	; (8001e9c <send_parameter+0x27c>)
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d11b      	bne.n	8001d44 <send_parameter+0x124>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001d0c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d10:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <send_parameter+0x274>)
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	891b      	ldrh	r3, [r3, #8]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d1e:	637a      	str	r2, [r7, #52]	; 0x34
 8001d20:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d28:	4621      	mov	r1, r4
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	61b9      	str	r1, [r7, #24]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	4319      	orrs	r1, r3
 8001d32:	61f9      	str	r1, [r7, #28]
 8001d34:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d38:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(U16);
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001d42:	e06a      	b.n	8001e1a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 8001d44:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d48:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <send_parameter+0x27c>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d005      	beq.n	8001d5c <send_parameter+0x13c>
		|| parameter_data_types[parameter] == SIGNED32)
 8001d50:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d54:	4a51      	ldr	r2, [pc, #324]	; (8001e9c <send_parameter+0x27c>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	2b07      	cmp	r3, #7
 8001d5a:	d11a      	bne.n	8001d92 <send_parameter+0x172>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001d5c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d60:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <send_parameter+0x274>)
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d72:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001d76:	4621      	mov	r1, r4
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	6139      	str	r1, [r7, #16]
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4319      	orrs	r1, r3
 8001d80:	6179      	str	r1, [r7, #20]
 8001d82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d86:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(U32);
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001d90:	e043      	b.n	8001e1a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 8001d92:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d96:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <send_parameter+0x27c>)
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d005      	beq.n	8001daa <send_parameter+0x18a>
		|| parameter_data_types[parameter] == SIGNED64)
 8001d9e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001da2:	4a3e      	ldr	r2, [pc, #248]	; (8001e9c <send_parameter+0x27c>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d115      	bne.n	8001dd6 <send_parameter+0x1b6>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001daa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001dae:	4a39      	ldr	r2, [pc, #228]	; (8001e94 <send_parameter+0x274>)
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001db8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dbc:	ea40 0402 	orr.w	r4, r0, r2
 8001dc0:	60bc      	str	r4, [r7, #8]
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dca:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(U64);
 8001dce:	2308      	movs	r3, #8
 8001dd0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001dd4:	e021      	b.n	8001e1a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 8001dd6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001dda:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <send_parameter+0x27c>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	2b09      	cmp	r3, #9
 8001de0:	d11b      	bne.n	8001e1a <send_parameter+0x1fa>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001de2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001de6:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <send_parameter+0x274>)
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	647b      	str	r3, [r7, #68]	; 0x44

		data |= float_con.u32;
 8001df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001df2:	2200      	movs	r2, #0
 8001df4:	623b      	str	r3, [r7, #32]
 8001df6:	627a      	str	r2, [r7, #36]	; 0x24
 8001df8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dfc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e00:	4621      	mov	r1, r4
 8001e02:	4311      	orrs	r1, r2
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	4629      	mov	r1, r5
 8001e08:	4319      	orrs	r1, r3
 8001e0a:	6079      	str	r1, [r7, #4]
 8001e0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e10:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(float);
 8001e14:	2304      	movs	r3, #4
 8001e16:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 8001e1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e26:	e025      	b.n	8001e74 <send_parameter+0x254>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 8001e28:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001e2c:	00d9      	lsls	r1, r3, #3
 8001e2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e32:	f1c1 0420 	rsb	r4, r1, #32
 8001e36:	f1a1 0020 	sub.w	r0, r1, #32
 8001e3a:	fa22 f801 	lsr.w	r8, r2, r1
 8001e3e:	fa03 f404 	lsl.w	r4, r3, r4
 8001e42:	ea48 0804 	orr.w	r8, r8, r4
 8001e46:	fa23 f000 	lsr.w	r0, r3, r0
 8001e4a:	ea48 0800 	orr.w	r8, r8, r0
 8001e4e:	fa23 f901 	lsr.w	r9, r3, r1
 8001e52:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001e56:	fa5f f288 	uxtb.w	r2, r8
 8001e5a:	3330      	adds	r3, #48	; 0x30
 8001e5c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e60:	440b      	add	r3, r1
 8001e62:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 8001e66:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001e74:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	dad5      	bge.n	8001e28 <send_parameter+0x208>
	}

	// send the built CAN message
	return tx_can_message(&message);
 8001e7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f8d5 	bl	8002030 <tx_can_message>
 8001e86:	4603      	mov	r3, r0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3768      	adds	r7, #104	; 0x68
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20003064 	.word	0x20003064
 8001e9c:	200002fc 	.word	0x200002fc

08001ea0 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
#else
	buffer = &tx_buffer;
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <service_can_tx_hardware+0x9c>)
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif // MULTI_BUS

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8001eac:	e037      	b.n	8001f1e <service_can_tx_hardware+0x7e>
	{
		U32 tx_mailbox_num;

		// Turn off the TX interrupt (if applicable)
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8001eae:	2101      	movs	r1, #1
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f001 f969 	bl	8003188 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	795b      	ldrb	r3, [r3, #5]
 8001ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec0:	7912      	ldrb	r2, [r2, #4]
 8001ec2:	fb93 f0f2 	sdiv	r0, r3, r2
 8001ec6:	fb00 f202 	mul.w	r2, r0, r2
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	440b      	add	r3, r1
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8001ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 8001ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eea:	795b      	ldrb	r3, [r3, #5]
 8001eec:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	1d9a      	adds	r2, r3, #6
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	f107 0110 	add.w	r1, r7, #16
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fed4 	bl	8002ca8 <HAL_CAN_AddTxMessage>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <service_can_tx_hardware+0x70>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <service_can_tx_hardware+0xa0>)
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e011      	b.n	8001f34 <service_can_tx_hardware+0x94>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8001f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f12:	f000 fb7c 	bl	800260e <remove_from_front>

		// re-enable the RX interrupt
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8001f16:	2101      	movs	r1, #1
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 f90f 	bl	800313c <HAL_CAN_ActivateNotification>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	799b      	ldrb	r3, [r3, #6]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <service_can_tx_hardware+0x92>
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 ff99 	bl	8002e5e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1bd      	bne.n	8001eae <service_can_tx_hardware+0xe>
#endif // TARGET == F7XX || TARGET == F4XX
	}

	return;
 8001f32:	bf00      	nop
}
 8001f34:	3730      	adds	r7, #48	; 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20003280 	.word	0x20003280
 8001f40:	20003074 	.word	0x20003074

08001f44 <service_can_rx_hardware>:
//  U32 rx_mailbox:         the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//                           Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8001f4e:	e037      	b.n	8001fc0 <service_can_rx_hardware+0x7c>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rx_buffer, rx_buffer.fill_level);
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001f56:	795b      	ldrb	r3, [r3, #5]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001f5c:	799b      	ldrb	r3, [r3, #6]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001f62:	7912      	ldrb	r2, [r2, #4]
 8001f64:	fb93 f0f2 	sdiv	r0, r3, r2
 8001f68:	fb00 f202 	mul.w	r2, r0, r2
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	440b      	add	r3, r1
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3306      	adds	r3, #6
 8001f78:	f107 0208 	add.w	r2, r7, #8
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 ffa2 	bl	8002ec8 <HAL_CAN_GetRxMessage>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <service_can_rx_hardware+0x50>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <service_can_rx_hardware+0xa0>)
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e022      	b.n	8001fda <service_can_rx_hardware+0x96>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001f96:	799b      	ldrb	r3, [r3, #6]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001f9e:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	711a      	strb	r2, [r3, #4]
		message->dlc = rx_header.DLC;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	715a      	strb	r2, [r3, #5]
		message->id = (rx_header.IDE ? rx_header.ExtId : rx_header.StdId);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <service_can_rx_hardware+0x76>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	e000      	b.n	8001fbc <service_can_rx_hardware+0x78>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbe:	6013      	str	r3, [r2, #0]
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001fc2:	799a      	ldrb	r2, [r3, #6]
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <service_can_rx_hardware+0x9c>)
 8001fc6:	791b      	ldrb	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d206      	bcs.n	8001fda <service_can_rx_hardware+0x96>
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f001 f88c 	bl	80030ec <HAL_CAN_GetRxFifoFillLevel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ba      	bne.n	8001f50 <service_can_rx_hardware+0xc>
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
#endif // CAN_ROUTER
	}
}
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20003078 	.word	0x20003078
 8001fe4:	20003074 	.word	0x20003074

08001fe8 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!IS_EMPTY(&rx_buffer))
 8001fee:	e013      	b.n	8002018 <service_can_rx_buffer+0x30>
	{
		// get the message at the head of the array
		current_message = GET_FROM_BUFFER(&rx_buffer, 0);
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <service_can_rx_buffer+0x44>)
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <service_can_rx_buffer+0x44>)
 8001ff6:	795b      	ldrb	r3, [r3, #5]
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <service_can_rx_buffer+0x44>)
 8001ffa:	7912      	ldrb	r2, [r2, #4]
 8001ffc:	fb93 f0f2 	sdiv	r0, r3, r2
 8002000:	fb00 f202 	mul.w	r2, r0, r2
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	440b      	add	r3, r1
 800200a:	607b      	str	r3, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f83d 	bl	800208c <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <service_can_rx_buffer+0x44>)
 8002014:	f000 fafb 	bl	800260e <remove_from_front>
	while (!IS_EMPTY(&rx_buffer))
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <service_can_rx_buffer+0x44>)
 800201a:	799b      	ldrb	r3, [r3, #6]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e7      	bne.n	8001ff0 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20003078 	.word	0x20003078

08002030 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

	// remove any trailing zeros in the CAN message. This is done by starting at the
	// back of the message and decrementing the DLC for each byte in the message that
	// is zero at the back. RX logic will add zero bytes as needed
	while (message_to_add->dlc > 0
 8002038:	e005      	b.n	8002046 <tx_can_message+0x16>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
	{
		message_to_add->dlc--;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	795b      	ldrb	r3, [r3, #5]
 800203e:	3b01      	subs	r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	715a      	strb	r2, [r3, #5]
	while (message_to_add->dlc > 0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	795b      	ldrb	r3, [r3, #5]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <tx_can_message+0x2e>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	795b      	ldrb	r3, [r3, #5]
 8002052:	3b01      	subs	r3, #1
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	799b      	ldrb	r3, [r3, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ed      	beq.n	800203a <tx_can_message+0xa>

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);

#else
	buffer = &tx_buffer;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <tx_can_message+0x58>)
 8002060:	60fb      	str	r3, [r7, #12]
#endif // MULTI_BUS

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (IS_FULL(buffer))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	799a      	ldrb	r2, [r3, #6]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <tx_can_message+0x44>
	{
		return TX_BUFFER_FULL;
 800206e:	f06f 0307 	mvn.w	r3, #7
 8002072:	e004      	b.n	800207e <tx_can_message+0x4e>
#endif // TARGET == F7XX || TARGET == F4XX

	return CAN_SUCCESS;
}
#else
    add_message_by_highest_prio(buffer, message_to_add);
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 faeb 	bl	8002652 <add_message_by_highest_prio>

    return CAN_SUCCESS;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20003280 	.word	0x20003280

0800208c <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 800208c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002090:	b08a      	sub	sp, #40	; 0x28
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 received_data = 0;
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 f9db 	bl	8002468 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 80020b2:	7c7a      	ldrb	r2, [r7, #17]
 80020b4:	4b74      	ldr	r3, [pc, #464]	; (8002288 <service_can_rx_message+0x1fc>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d005      	beq.n	80020c8 <service_can_rx_message+0x3c>
 80020bc:	7c7b      	ldrb	r3, [r7, #17]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <service_can_rx_message+0x3c>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 80020c2:	f06f 030c 	mvn.w	r3, #12
 80020c6:	e0d9      	b.n	800227c <service_can_rx_message+0x1f0>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d014      	beq.n	80020f8 <service_can_rx_message+0x6c>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 80020ce:	f000 fb97 	bl	8002800 <HAL_GetTick>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a6d      	ldr	r2, [pc, #436]	; (800228c <service_can_rx_message+0x200>)
 80020d6:	6013      	str	r3, [r2, #0]
		last_error.source_module = id.source_module;
 80020d8:	7cba      	ldrb	r2, [r7, #18]
 80020da:	4b6c      	ldr	r3, [pc, #432]	; (800228c <service_can_rx_message+0x200>)
 80020dc:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 80020de:	8aba      	ldrh	r2, [r7, #20]
 80020e0:	4b6a      	ldr	r3, [pc, #424]	; (800228c <service_can_rx_message+0x200>)
 80020e2:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	795b      	ldrb	r3, [r3, #5]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <service_can_rx_message+0x68>
		{
			last_error.error_id = message->data[0];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	799a      	ldrb	r2, [r3, #6]
 80020f0:	4b66      	ldr	r3, [pc, #408]	; (800228c <service_can_rx_message+0x200>)
 80020f2:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e0c1      	b.n	800227c <service_can_rx_message+0x1f0>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 80020f8:	8abb      	ldrh	r3, [r7, #20]
 80020fa:	2bbc      	cmp	r3, #188	; 0xbc
 80020fc:	d908      	bls.n	8002110 <service_can_rx_message+0x84>
	{
		send_error_message(&id, ID_NOT_FOUND);
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f9e7 	bl	80024d8 <send_error_message>

		return NOT_FOUND_ERR;
 800210a:	f06f 0309 	mvn.w	r3, #9
 800210e:	e0b5      	b.n	800227c <service_can_rx_message+0x1f0>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 8002110:	8abb      	ldrh	r3, [r7, #20]
 8002112:	461a      	mov	r2, r3
 8002114:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <service_can_rx_message+0x204>)
 8002116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 800211c:	f000 fb70 	bl	8002800 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 8002126:	8abb      	ldrh	r3, [r7, #20]
 8002128:	461a      	mov	r2, r3
 800212a:	4b5a      	ldr	r3, [pc, #360]	; (8002294 <service_can_rx_message+0x208>)
 800212c:	5c9b      	ldrb	r3, [r3, r2]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <service_can_rx_message+0xb6>
	{
		return run_can_command(message, &id);
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8db 	bl	80022f4 <run_can_command>
 800213e:	4603      	mov	r3, r0
 8002140:	e09c      	b.n	800227c <service_can_rx_message+0x1f0>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	791b      	ldrb	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d108      	bne.n	800215c <service_can_rx_message+0xd0>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	2102      	movs	r1, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f9c1 	bl	80024d8 <send_error_message>
		return NOT_ENABLED_ERR;
 8002156:	f06f 030a 	mvn.w	r3, #10
 800215a:	e08f      	b.n	800227c <service_can_rx_message+0x1f0>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	791b      	ldrb	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <service_can_rx_message+0xe8>
	{
		return parameter_requested(message, &id);
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f894 	bl	8002298 <parameter_requested>
 8002170:	4603      	mov	r3, r0
 8002172:	e083      	b.n	800227c <service_can_rx_message+0x1f0>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	795b      	ldrb	r3, [r3, #5]
 8002178:	3b01      	subs	r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	77fb      	strb	r3, [r7, #31]
 800217e:	e01b      	b.n	80021b8 <service_can_rx_message+0x12c>
	{
		received_data |= message->data[c] << (c * BITS_IN_BYTE);
 8002180:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	799b      	ldrb	r3, [r3, #6]
 800218a:	461a      	mov	r2, r3
 800218c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	17da      	asrs	r2, r3, #31
 8002198:	461c      	mov	r4, r3
 800219a:	4615      	mov	r5, r2
 800219c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021a0:	ea42 0804 	orr.w	r8, r2, r4
 80021a4:	ea43 0905 	orr.w	r9, r3, r5
 80021a8:	e9c7 8908 	strd	r8, r9, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 80021ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	77fb      	strb	r3, [r7, #31]
 80021b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	dadf      	bge.n	8002180 <service_can_rx_message+0xf4>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2200      	movs	r2, #0
 80021c4:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 80021c6:	8abb      	ldrh	r3, [r7, #20]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <service_can_rx_message+0x208>)
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d84b      	bhi.n	800226c <service_can_rx_message+0x1e0>
 80021d4:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <service_can_rx_message+0x150>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	08002201 	.word	0x08002201
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	08002217 	.word	0x08002217
 80021e8:	08002221 	.word	0x08002221
 80021ec:	0800222f 	.word	0x0800222f
 80021f0:	0800223b 	.word	0x0800223b
 80021f4:	08002247 	.word	0x08002247
 80021f8:	08002251 	.word	0x08002251
 80021fc:	0800225f 	.word	0x0800225f
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)received_data;
 8002200:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 8002208:	2300      	movs	r3, #0
 800220a:	e037      	b.n	800227c <service_can_rx_message+0x1f0>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)received_data;
 800220c:	8c3a      	ldrh	r2, [r7, #32]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 8002212:	2300      	movs	r3, #0
 8002214:	e032      	b.n	800227c <service_can_rx_message+0x1f0>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)received_data;
 8002216:	6a3a      	ldr	r2, [r7, #32]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800221c:	2300      	movs	r3, #0
 800221e:	e02d      	b.n	800227c <service_can_rx_message+0x1f0>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)received_data;
 8002220:	69b9      	ldr	r1, [r7, #24]
 8002222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002226:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return CAN_SUCCESS;
 800222a:	2300      	movs	r3, #0
 800222c:	e026      	b.n	800227c <service_can_rx_message+0x1f0>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)received_data;
 800222e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 8002236:	2300      	movs	r3, #0
 8002238:	e020      	b.n	800227c <service_can_rx_message+0x1f0>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)received_data;
 800223a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 8002242:	2300      	movs	r3, #0
 8002244:	e01a      	b.n	800227c <service_can_rx_message+0x1f0>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)received_data;
 8002246:	6a3a      	ldr	r2, [r7, #32]
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800224c:	2300      	movs	r3, #0
 800224e:	e015      	b.n	800227c <service_can_rx_message+0x1f0>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)received_data;
 8002250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return CAN_SUCCESS;
 800225a:	2300      	movs	r3, #0
 800225c:	e00e      	b.n	800227c <service_can_rx_message+0x1f0>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)received_data;
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8002268:	2300      	movs	r3, #0
 800226a:	e007      	b.n	800227c <service_can_rx_message+0x1f0>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	2104      	movs	r1, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f930 	bl	80024d8 <send_error_message>
		return NOT_FOUND_ERR;
 8002278:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 800227c:	4618      	mov	r0, r3
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002286:	bf00      	nop
 8002288:	20003064 	.word	0x20003064
 800228c:	20003068 	.word	0x20003068
 8002290:	20000008 	.word	0x20000008
 8002294:	200002fc 	.word	0x200002fc

08002298 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	795b      	ldrb	r3, [r3, #5]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 80022aa:	2103      	movs	r1, #3
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	f000 f913 	bl	80024d8 <send_error_message>

		return SIZE_ERR;
 80022b2:	f06f 030b 	mvn.w	r3, #11
 80022b6:	e019      	b.n	80022ec <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	889b      	ldrh	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <parameter_requested+0x30>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	2bbc      	cmp	r3, #188	; 0xbc
 80022c6:	d906      	bls.n	80022d6 <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 80022c8:	2100      	movs	r1, #0
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f000 f904 	bl	80024d8 <send_error_message>

		return NOT_FOUND_ERR;
 80022d0:	f06f 0309 	mvn.w	r3, #9
 80022d4:	e00a      	b.n	80022ec <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7818      	ldrb	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	7899      	ldrb	r1, [r3, #2]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	889b      	ldrh	r3, [r3, #4]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	f7ff fc9b 	bl	8001c20 <send_parameter>
 80022ea:	4603      	mov	r3, r0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND_ID command_id;
	CUST_FUNC* this_function;
	U8 c;

	// DLC error checking
	if (message->dlc > COMMAND_SIZE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	795b      	ldrb	r3, [r3, #5]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d906      	bls.n	8002314 <run_can_command+0x20>
	{
		// there is either no DLC (no function ID) or too many parameters sent
		send_error_message(id, SIZE_ERROR);
 8002306:	2103      	movs	r1, #3
 8002308:	6838      	ldr	r0, [r7, #0]
 800230a:	f000 f8e5 	bl	80024d8 <send_error_message>
		return SIZE_ERR;
 800230e:	f06f 030b 	mvn.w	r3, #11
 8002312:	e042      	b.n	800239a <run_can_command+0xa6>
	}

	// fill in the extra DLC of the message with zeros
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	795b      	ldrb	r3, [r3, #5]
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e007      	b.n	800232c <run_can_command+0x38>
	{
		message->data[c] = 0;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	2200      	movs	r2, #0
 8002324:	719a      	strb	r2, [r3, #6]
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	3301      	adds	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d9f4      	bls.n	800231c <run_can_command+0x28>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	799b      	ldrb	r3, [r3, #6]
 8002336:	73bb      	strb	r3, [r7, #14]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	2b07      	cmp	r3, #7
 800233c:	d906      	bls.n	800234c <run_can_command+0x58>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 800233e:	2101      	movs	r1, #1
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	f000 f8c9 	bl	80024d8 <send_error_message>

		return NOT_FOUND_ERR;
 8002346:	f06f 0309 	mvn.w	r3, #9
 800234a:	e026      	b.n	800239a <run_can_command+0xa6>
	}

	this_function = &(cust_funcs[command_id]);
 800234c:	7bba      	ldrb	r2, [r7, #14]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <run_can_command+0xb0>)
 8002358:	4413      	add	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	791b      	ldrb	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <run_can_command+0x7e>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 8002364:	2105      	movs	r1, #5
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	f000 f8b6 	bl	80024d8 <send_error_message>

		return NOT_ENABLED_ERR;
 800236c:	f06f 030a 	mvn.w	r3, #10
 8002370:	e013      	b.n	800239a <run_can_command+0xa6>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	681c      	ldr	r4, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	7898      	ldrb	r0, [r3, #2]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	79dd      	ldrb	r5, [r3, #7]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7a1e      	ldrb	r6, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7a5b      	ldrb	r3, [r3, #9]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7a92      	ldrb	r2, [r2, #10]
 800238e:	9201      	str	r2, [sp, #4]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4633      	mov	r3, r6
 8002394:	462a      	mov	r2, r5
 8002396:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20003004 	.word	0x20003004

080023a8 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	071b      	lsls	r3, r3, #28
 80023cc:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	059b      	lsls	r3, r3, #22
 80023ec:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 80023f4:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	789b      	ldrb	r3, [r3, #2]
 8002406:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002414:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	78db      	ldrb	r3, [r3, #3]
 8002426:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	03db      	lsls	r3, r3, #15
 800242c:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002434:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	889b      	ldrh	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800244e:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0f1b      	lsrs	r3, r3, #28
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0d9b      	lsrs	r3, r3, #22
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002490:	b2da      	uxtb	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0bdb      	lsrs	r3, r3, #15
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	809a      	strh	r2, [r3, #4]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	789b      	ldrb	r3, [r3, #2]
 80024ee:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <send_error_message+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	889b      	ldrh	r3, [r3, #4]
 80024fe:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 8002500:	f107 0208 	add.w	r2, r7, #8
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff4c 	bl	80023a8 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 8002510:	2300      	movs	r3, #0
 8002512:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 8002514:	2301      	movs	r3, #1
 8002516:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fd85 	bl	8002030 <tx_can_message>
 8002526:	4603      	mov	r3, r0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20003064 	.word	0x20003064

08002534 <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX || TARGET == F4XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fcaf 	bl	8001ea0 <service_can_tx_hardware>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fca4 	bl	8001ea0 <service_can_tx_hardware>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fc99 	bl	8001ea0 <service_can_tx_hardware>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fc8e 	bl	8001ea0 <service_can_tx_hardware>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fc83 	bl	8001ea0 <service_can_tx_hardware>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fc78 	bl	8001ea0 <service_can_tx_hardware>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6039      	str	r1, [r7, #0]
 80025c0:	4611      	mov	r1, r2
 80025c2:	461a      	mov	r2, r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	460b      	mov	r3, r1
 80025ca:	71bb      	strb	r3, [r7, #6]
 80025cc:	4613      	mov	r3, r2
 80025ce:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (IS_EMPTY(buffer))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	799b      	ldrb	r3, [r3, #6]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <remove_from_front+0x38>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	7912      	ldrb	r2, [r2, #4]
 8002628:	fb93 f1f2 	sdiv	r1, r3, r2
 800262c:	fb01 f202 	mul.w	r2, r1, r2
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	b2da      	uxtb	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	799b      	ldrb	r3, [r3, #6]
 800263c:	3b01      	subs	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	719a      	strb	r2, [r3, #6]
 8002644:	e000      	b.n	8002648 <remove_from_front+0x3a>
		return;
 8002646:	bf00      	nop
}
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message. This function assumes the buffer is not full
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	795b      	ldrb	r3, [r3, #5]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	7912      	ldrb	r2, [r2, #4]
 8002668:	fb93 f0f2 	sdiv	r0, r3, r2
 800266c:	fb00 f202 	mul.w	r2, r0, r2
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	440b      	add	r3, r1
 8002676:	60fb      	str	r3, [r7, #12]

	// start from the back of the buffer, moving each message towards the back
	// by one and put the new message in the correct spot by ID. If the buffer
	// was empty when the message first went through here, it will put the new
	// message in position 0
	buffer->fill_level++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	799b      	ldrb	r3, [r3, #6]
 800267c:	3301      	adds	r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	719a      	strb	r2, [r3, #6]
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	799b      	ldrb	r3, [r3, #6]
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b02      	subs	r3, #2
 800268c:	b29b      	uxth	r3, r3
 800268e:	817b      	strh	r3, [r7, #10]
 8002690:	e047      	b.n	8002722 <add_message_by_highest_prio+0xd0>
	{
		buffer_message = GET_FROM_BUFFER(buffer, c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	795b      	ldrb	r3, [r3, #5]
 800269a:	461a      	mov	r2, r3
 800269c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026a0:	4413      	add	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	7912      	ldrb	r2, [r2, #4]
 80026a6:	fb93 f0f2 	sdiv	r0, r3, r2
 80026aa:	fb00 f202 	mul.w	r2, r0, r2
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	440b      	add	r3, r1
 80026b4:	60fb      	str	r3, [r7, #12]
		if (message->id >= buffer_message->id)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d313      	bcc.n	80026ea <add_message_by_highest_prio+0x98>
		{
			// we have found the correct place for the new message
			buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	795b      	ldrb	r3, [r3, #5]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026d0:	4413      	add	r3, r2
 80026d2:	3301      	adds	r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	7912      	ldrb	r2, [r2, #4]
 80026d8:	fb93 f0f2 	sdiv	r0, r3, r2
 80026dc:	fb00 f202 	mul.w	r2, r0, r2
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	440b      	add	r3, r1
 80026e6:	60fb      	str	r3, [r7, #12]
			break;
 80026e8:	e01f      	b.n	800272a <add_message_by_highest_prio+0xd8>
		}

		// move this message back by 1 and try again
		copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6819      	ldr	r1, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	795b      	ldrb	r3, [r3, #5]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026f8:	4413      	add	r3, r2
 80026fa:	3301      	adds	r3, #1
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	7912      	ldrb	r2, [r2, #4]
 8002700:	fb93 f0f2 	sdiv	r0, r3, r2
 8002704:	fb00 f202 	mul.w	r2, r0, r2
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	440b      	add	r3, r1
 800270e:	4619      	mov	r1, r3
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f812 	bl	800273a <copy_message>
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8002716:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29b      	uxth	r3, r3
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002726:	2b00      	cmp	r3, #0
 8002728:	dab3      	bge.n	8002692 <add_message_by_highest_prio+0x40>
	}

	// put the message into the buffer at this position
	copy_message(message, buffer_message);
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f000 f804 	bl	800273a <copy_message>
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <copy_message>:


// copy_message
//  function to copy all of the data in source to dest by value, not by refernce
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
	U8 c;

	dest->id = source->id;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	601a      	str	r2, [r3, #0]
	dest->dlc = source->dlc;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	795a      	ldrb	r2, [r3, #5]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	715a      	strb	r2, [r3, #5]
	dest->rtr_bit = source->rtr_bit;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	791a      	ldrb	r2, [r3, #4]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < dest->dlc; c++)
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e00b      	b.n	800277a <copy_message+0x40>
	{
		dest->data[c] = source->data[c];
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	440a      	add	r2, r1
 800276a:	7991      	ldrb	r1, [r2, #6]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	460a      	mov	r2, r1
 8002772:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < dest->dlc; c++)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	3301      	adds	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	795b      	ldrb	r3, [r3, #5]
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	429a      	cmp	r2, r3
 8002782:	d3ee      	bcc.n	8002762 <copy_message+0x28>
	}
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_Init+0x40>)
 800279e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_Init+0x40>)
 80027aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <HAL_Init+0x40>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 ffa0 	bl	8003702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c2:	200f      	movs	r0, #15
 80027c4:	f7fe ff72 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c8:	f7fe fd94 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200003c0 	.word	0x200003c0
 80027fc:	20003d28 	.word	0x20003d28

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20003d28 	.word	0x20003d28

08002818 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_SetTickFreq+0x48>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	79fa      	ldrb	r2, [r7, #7]
 800282c:	429a      	cmp	r2, r3
 800282e:	d012      	beq.n	8002856 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_SetTickFreq+0x48>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_SetTickFreq+0x48>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_SetTickFreq+0x4c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff33 	bl	80016ac <HAL_InitTick>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8002850:	4a03      	ldr	r2, [pc, #12]	; (8002860 <HAL_SetTickFreq+0x48>)
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200003c0 	.word	0x200003c0
 8002864:	200003bc 	.word	0x200003bc

08002868 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0ed      	b.n	8002a56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe fd60 	bl	800134c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800289c:	f7ff ffb0 	bl	8002800 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028a2:	e012      	b.n	80028ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028a4:	f7ff ffac 	bl	8002800 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b0a      	cmp	r3, #10
 80028b0:	d90b      	bls.n	80028ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2205      	movs	r2, #5
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0c5      	b.n	8002a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0e5      	beq.n	80028a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0202 	bic.w	r2, r2, #2
 80028e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e8:	f7ff ff8a 	bl	8002800 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028ee:	e012      	b.n	8002916 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f0:	f7ff ff86 	bl	8002800 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d90b      	bls.n	8002916 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2205      	movs	r2, #5
 800290e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e09f      	b.n	8002a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e007      	b.n	800294e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7e5b      	ldrb	r3, [r3, #25]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e007      	b.n	8002978 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7e9b      	ldrb	r3, [r3, #26]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d108      	bne.n	8002992 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0220 	orr.w	r2, r2, #32
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0220 	bic.w	r2, r2, #32
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7edb      	ldrb	r3, [r3, #27]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0210 	bic.w	r2, r2, #16
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e007      	b.n	80029cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0210 	orr.w	r2, r2, #16
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7f1b      	ldrb	r3, [r3, #28]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0208 	orr.w	r2, r2, #8
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7f5b      	ldrb	r3, [r3, #29]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0204 	orr.w	r2, r2, #4
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	ea42 0103 	orr.w	r1, r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d003      	beq.n	8002a86 <HAL_CAN_ConfigFilter+0x26>
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f040 80be 	bne.w	8002c02 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a86:	4b65      	ldr	r3, [pc, #404]	; (8002c1c <HAL_CAN_ConfigFilter+0x1bc>)
 8002a88:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aa0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	401a      	ands	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d123      	bne.n	8002b30 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3248      	adds	r2, #72	; 0x48
 8002b10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	3348      	adds	r3, #72	; 0x48
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d122      	bne.n	8002b7e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3248      	adds	r2, #72	; 0x48
 8002b5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b74:	6979      	ldr	r1, [r7, #20]
 8002b76:	3348      	adds	r3, #72	; 0x48
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b98:	e007      	b.n	8002baa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002bc4:	e007      	b.n	8002bd6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bf4:	f023 0201 	bic.w	r2, r3, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e006      	b.n	8002c10 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40006400 	.word	0x40006400

08002c20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d12e      	bne.n	8002c92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7ff fdd8 	bl	8002800 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c52:	e012      	b.n	8002c7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c54:	f7ff fdd4 	bl	8002800 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	d90b      	bls.n	8002c7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2205      	movs	r2, #5
 8002c72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e012      	b.n	8002ca0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e006      	b.n	8002ca0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cc6:	7ffb      	ldrb	r3, [r7, #31]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d003      	beq.n	8002cd4 <HAL_CAN_AddTxMessage+0x2c>
 8002ccc:	7ffb      	ldrb	r3, [r7, #31]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	f040 80b8 	bne.w	8002e44 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d105      	bne.n	8002cf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80a0 	beq.w	8002e34 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d907      	bls.n	8002d14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e09e      	b.n	8002e52 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d14:	2201      	movs	r2, #1
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	6809      	ldr	r1, [r1, #0]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3318      	adds	r3, #24
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	440b      	add	r3, r1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e00f      	b.n	8002d62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d52:	68f9      	ldr	r1, [r7, #12]
 8002d54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	440b      	add	r3, r1
 8002d60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3318      	adds	r3, #24
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	440b      	add	r3, r1
 8002d72:	3304      	adds	r3, #4
 8002d74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	7d1b      	ldrb	r3, [r3, #20]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d111      	bne.n	8002da2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3318      	adds	r3, #24
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	6811      	ldr	r1, [r2, #0]
 8002d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3318      	adds	r3, #24
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3304      	adds	r3, #4
 8002da0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3307      	adds	r3, #7
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	061a      	lsls	r2, r3, #24
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3306      	adds	r3, #6
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3305      	adds	r3, #5
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	3204      	adds	r2, #4
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	6811      	ldr	r1, [r2, #0]
 8002dca:	ea43 0200 	orr.w	r2, r3, r0
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002dd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3303      	adds	r3, #3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	061a      	lsls	r2, r3, #24
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3302      	adds	r3, #2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3301      	adds	r3, #1
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	6811      	ldr	r1, [r2, #0]
 8002e00:	ea43 0200 	orr.w	r2, r3, r0
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3318      	adds	r3, #24
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4413      	add	r3, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e00e      	b.n	8002e52 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e006      	b.n	8002e52 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e70:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d11d      	bne.n	8002eba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002edc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d003      	beq.n	8002eec <HAL_CAN_GetRxMessage+0x24>
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	f040 80f3 	bne.w	80030d2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0e7      	b.n	80030e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0d8      	b.n	80030e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	331b      	adds	r3, #27
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0204 	and.w	r2, r3, #4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	331b      	adds	r3, #27
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	4413      	add	r3, r2
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	0d5b      	lsrs	r3, r3, #21
 8002f5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e00b      	b.n	8002f7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	331b      	adds	r3, #27
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4413      	add	r3, r2
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	331b      	adds	r3, #27
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	4413      	add	r3, r2
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0202 	and.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	331b      	adds	r3, #27
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	331b      	adds	r3, #27
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	331b      	adds	r3, #27
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0a1a      	lsrs	r2, r3, #8
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4413      	add	r3, r2
 8003016:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0c1a      	lsrs	r2, r3, #16
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	3302      	adds	r3, #2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	4413      	add	r3, r2
 8003030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0e1a      	lsrs	r2, r3, #24
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	3303      	adds	r3, #3
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	4413      	add	r3, r2
 800304a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3304      	adds	r3, #4
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	4413      	add	r3, r2
 8003062:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0a1a      	lsrs	r2, r3, #8
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	3305      	adds	r3, #5
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0c1a      	lsrs	r2, r3, #16
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	3306      	adds	r3, #6
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0e1a      	lsrs	r2, r3, #24
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	3307      	adds	r3, #7
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0220 	orr.w	r2, r2, #32
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	e007      	b.n	80030ce <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0220 	orr.w	r2, r2, #32
 80030cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e006      	b.n	80030e0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003100:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d002      	beq.n	800310e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d10f      	bne.n	800312e <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e005      	b.n	800312e <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d002      	beq.n	800315a <HAL_CAN_ActivateNotification+0x1e>
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d109      	bne.n	800316e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6959      	ldr	r1, [r3, #20]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e006      	b.n	800317c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <HAL_CAN_DeactivateNotification+0x1e>
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d10a      	bne.n	80031bc <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6959      	ldr	r1, [r3, #20]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	400a      	ands	r2, r1
 80031b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e006      	b.n	80031ca <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b08a      	sub	sp, #40	; 0x28
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d07c      	beq.n	8003316 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d023      	beq.n	800326e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff f97b 	bl	8002534 <HAL_CAN_TxMailbox0CompleteCallback>
 800323e:	e016      	b.n	800326e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	e00c      	b.n	800326e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	e002      	b.n	800326e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff f984 	bl	8002576 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003280:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff f95c 	bl	800254a <HAL_CAN_TxMailbox1CompleteCallback>
 8003292:	e016      	b.n	80032c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e00c      	b.n	80032c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	e002      	b.n	80032c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff f965 	bl	800258c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d024      	beq.n	8003316 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff f93d 	bl	8002560 <HAL_CAN_TxMailbox2CompleteCallback>
 80032e6:	e016      	b.n	8003316 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e00c      	b.n	8003316 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
 800330e:	e002      	b.n	8003316 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff f946 	bl	80025a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003330:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2208      	movs	r2, #8
 8003354:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8f4 	bl	8003544 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fe fbf7 	bl	8001b68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003394:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2208      	movs	r2, #8
 80033b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8cc 	bl	8003558 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fe fbd1 	bl	8001b80 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2210      	movs	r2, #16
 80033f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8b6 	bl	800356c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8af 	bl	8003580 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d07b      	beq.n	8003524 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d072      	beq.n	800351c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003490:	2b00      	cmp	r3, #0
 8003492:	d043      	beq.n	800351c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03e      	beq.n	800351c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d02b      	beq.n	8003500 <HAL_CAN_IRQHandler+0x32a>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d82e      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d022      	beq.n	80034f6 <HAL_CAN_IRQHandler+0x320>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d82a      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d019      	beq.n	80034ec <HAL_CAN_IRQHandler+0x316>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d826      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d010      	beq.n	80034e2 <HAL_CAN_IRQHandler+0x30c>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d822      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d002      	beq.n	80034ce <HAL_CAN_IRQHandler+0x2f8>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d005      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034cc:	e01d      	b.n	800350a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034d6:	e019      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	f043 0310 	orr.w	r3, r3, #16
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034e0:	e014      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	f043 0320 	orr.w	r3, r3, #32
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034ea:	e00f      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034f4:	e00a      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034fe:	e005      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003508:	e000      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            break;
 800350a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800351a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2204      	movs	r2, #4
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f82c 	bl	8003594 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <__NVIC_GetPriorityGrouping+0x18>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f003 0307 	and.w	r3, r3, #7
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db0b      	blt.n	8003636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4907      	ldr	r1, [pc, #28]	; (8003644 <__NVIC_EnableIRQ+0x38>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2001      	movs	r0, #1
 800362e:	fa00 f202 	lsl.w	r2, r0, r2
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
         );
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff4c 	bl	80035a8 <__NVIC_SetPriorityGrouping>
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800372a:	f7ff ff61 	bl	80035f0 <__NVIC_GetPriorityGrouping>
 800372e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f7ff ffb1 	bl	800369c <NVIC_EncodePriority>
 800373a:	4602      	mov	r2, r0
 800373c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff80 	bl	8003648 <__NVIC_SetPriority>
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff54 	bl	800360c <__NVIC_EnableIRQ>
}
 8003764:	bf00      	nop
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff f842 	bl	8002800 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e099      	b.n	80038bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a8:	e00f      	b.n	80037ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037aa:	f7ff f829 	bl	8002800 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d908      	bls.n	80037ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2203      	movs	r2, #3
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e078      	b.n	80038bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e8      	bne.n	80037aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <HAL_DMA_Init+0x158>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b04      	cmp	r3, #4
 8003822:	d107      	bne.n	8003834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	4313      	orrs	r3, r2
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0307 	bic.w	r3, r3, #7
 800384a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b04      	cmp	r3, #4
 800385c:	d117      	bne.n	800388e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00e      	beq.n	800388e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fa6f 	bl	8003d54 <DMA_CheckFifoParam>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800388a:	2301      	movs	r3, #1
 800388c:	e016      	b.n	80038bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa26 	bl	8003ce8 <DMA_CalcBaseAndBitshift>
 800389c:	4603      	mov	r3, r0
 800389e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	223f      	movs	r2, #63	; 0x3f
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	f010803f 	.word	0xf010803f

080038c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_DMA_Start_IT+0x26>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e040      	b.n	8003970 <HAL_DMA_Start_IT+0xa8>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d12f      	bne.n	8003962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f9b8 	bl	8003c8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	223f      	movs	r2, #63	; 0x3f
 8003922:	409a      	lsls	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0216 	orr.w	r2, r2, #22
 8003936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0208 	orr.w	r2, r2, #8
 800394e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e005      	b.n	800396e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800396e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003984:	4b8e      	ldr	r3, [pc, #568]	; (8003bc0 <HAL_DMA_IRQHandler+0x248>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a8e      	ldr	r2, [pc, #568]	; (8003bc4 <HAL_DMA_IRQHandler+0x24c>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0a9b      	lsrs	r3, r3, #10
 8003990:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	2208      	movs	r2, #8
 80039a4:	409a      	lsls	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01a      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0204 	bic.w	r2, r2, #4
 80039ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	2208      	movs	r2, #8
 80039d2:	409a      	lsls	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	2201      	movs	r2, #1
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	2204      	movs	r2, #4
 8003a20:	409a      	lsls	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0204 	orr.w	r2, r3, #4
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	2210      	movs	r2, #16
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d043      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d03c      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2210      	movs	r2, #16
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d018      	beq.n	8003aba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d024      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	4798      	blx	r3
 8003aa6:	e01f      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
 8003ab8:	e016      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0208 	bic.w	r2, r2, #8
 8003ad6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	2220      	movs	r2, #32
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 808f 	beq.w	8003c18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8087 	beq.w	8003c18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2220      	movs	r2, #32
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d136      	bne.n	8003b90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0216 	bic.w	r2, r2, #22
 8003b30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_DMA_IRQHandler+0x1da>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0208 	bic.w	r2, r2, #8
 8003b60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	223f      	movs	r2, #63	; 0x3f
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d07e      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
        }
        return;
 8003b8e:	e079      	b.n	8003c84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01d      	beq.n	8003bda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10d      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d031      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
 8003bbc:	e02c      	b.n	8003c18 <HAL_DMA_IRQHandler+0x2a0>
 8003bbe:	bf00      	nop
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d023      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	e01e      	b.n	8003c18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10f      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0210 	bic.w	r2, r2, #16
 8003bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d032      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d022      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2205      	movs	r2, #5
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d307      	bcc.n	8003c60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f2      	bne.n	8003c44 <HAL_DMA_IRQHandler+0x2cc>
 8003c5e:	e000      	b.n	8003c62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c84:	bf00      	nop
    }
  }
}
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
 8003c98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d108      	bne.n	8003ccc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cca:	e007      	b.n	8003cdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	60da      	str	r2, [r3, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3b10      	subs	r3, #16
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <DMA_CalcBaseAndBitshift+0x64>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <DMA_CalcBaseAndBitshift+0x68>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d909      	bls.n	8003d2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	659a      	str	r2, [r3, #88]	; 0x58
 8003d28:	e007      	b.n	8003d3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	aaaaaaab 	.word	0xaaaaaaab
 8003d50:	08007efc 	.word	0x08007efc

08003d54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11f      	bne.n	8003dae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d856      	bhi.n	8003e22 <DMA_CheckFifoParam+0xce>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <DMA_CheckFifoParam+0x28>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d9f 	.word	0x08003d9f
 8003d84:	08003d8d 	.word	0x08003d8d
 8003d88:	08003e23 	.word	0x08003e23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d046      	beq.n	8003e26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9c:	e043      	b.n	8003e26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da6:	d140      	bne.n	8003e2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dac:	e03d      	b.n	8003e2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db6:	d121      	bne.n	8003dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d837      	bhi.n	8003e2e <DMA_CheckFifoParam+0xda>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <DMA_CheckFifoParam+0x70>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003ddb 	.word	0x08003ddb
 8003dcc:	08003dd5 	.word	0x08003dd5
 8003dd0:	08003ded 	.word	0x08003ded
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e030      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d025      	beq.n	8003e32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dea:	e022      	b.n	8003e32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df4:	d11f      	bne.n	8003e36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dfa:	e01c      	b.n	8003e36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d903      	bls.n	8003e0a <DMA_CheckFifoParam+0xb6>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d003      	beq.n	8003e10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e08:	e018      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0e:	e015      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	e00b      	b.n	8003e3a <DMA_CheckFifoParam+0xe6>
      break;
 8003e22:	bf00      	nop
 8003e24:	e00a      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e008      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e006      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e004      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e165      	b.n	8004134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e68:	2201      	movs	r2, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	f040 8154 	bne.w	800412e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d005      	beq.n	8003e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d130      	bne.n	8003f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 0201 	and.w	r2, r3, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d017      	beq.n	8003f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d123      	bne.n	8003f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	08da      	lsrs	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3208      	adds	r2, #8
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	08da      	lsrs	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3208      	adds	r2, #8
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0203 	and.w	r2, r3, #3
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80ae 	beq.w	800412e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	; (800414c <HAL_GPIO_Init+0x300>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	4a5c      	ldr	r2, [pc, #368]	; (800414c <HAL_GPIO_Init+0x300>)
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe2:	4b5a      	ldr	r3, [pc, #360]	; (800414c <HAL_GPIO_Init+0x300>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fee:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_GPIO_Init+0x304>)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	220f      	movs	r2, #15
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <HAL_GPIO_Init+0x308>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d025      	beq.n	8004066 <HAL_GPIO_Init+0x21a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4e      	ldr	r2, [pc, #312]	; (8004158 <HAL_GPIO_Init+0x30c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01f      	beq.n	8004062 <HAL_GPIO_Init+0x216>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4d      	ldr	r2, [pc, #308]	; (800415c <HAL_GPIO_Init+0x310>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d019      	beq.n	800405e <HAL_GPIO_Init+0x212>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4c      	ldr	r2, [pc, #304]	; (8004160 <HAL_GPIO_Init+0x314>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_GPIO_Init+0x20e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4b      	ldr	r2, [pc, #300]	; (8004164 <HAL_GPIO_Init+0x318>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_Init+0x20a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4a      	ldr	r2, [pc, #296]	; (8004168 <HAL_GPIO_Init+0x31c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_Init+0x206>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a49      	ldr	r2, [pc, #292]	; (800416c <HAL_GPIO_Init+0x320>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_Init+0x202>
 800404a:	2306      	movs	r3, #6
 800404c:	e00c      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 800404e:	2307      	movs	r3, #7
 8004050:	e00a      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004052:	2305      	movs	r3, #5
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004056:	2304      	movs	r3, #4
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x21c>
 8004066:	2300      	movs	r3, #0
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f002 0203 	and.w	r2, r2, #3
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004078:	4935      	ldr	r1, [pc, #212]	; (8004150 <HAL_GPIO_Init+0x304>)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004086:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_GPIO_Init+0x324>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040aa:	4a31      	ldr	r2, [pc, #196]	; (8004170 <HAL_GPIO_Init+0x324>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b0:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <HAL_GPIO_Init+0x324>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <HAL_GPIO_Init+0x324>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040da:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_GPIO_Init+0x324>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_GPIO_Init+0x324>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_GPIO_Init+0x324>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004128:	4a11      	ldr	r2, [pc, #68]	; (8004170 <HAL_GPIO_Init+0x324>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	f67f ae96 	bls.w	8003e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	; 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40013800 	.word	0x40013800
 8004154:	40020000 	.word	0x40020000
 8004158:	40020400 	.word	0x40020400
 800415c:	40020800 	.word	0x40020800
 8004160:	40020c00 	.word	0x40020c00
 8004164:	40021000 	.word	0x40021000
 8004168:	40021400 	.word	0x40021400
 800416c:	40021800 	.word	0x40021800
 8004170:	40013c00 	.word	0x40013c00

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004190:	e003      	b.n	800419a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	619a      	str	r2, [r3, #24]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0cc      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b68      	ldr	r3, [pc, #416]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d90c      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b63      	ldr	r3, [pc, #396]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0b8      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041fc:	4b59      	ldr	r3, [pc, #356]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a58      	ldr	r2, [pc, #352]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004214:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a52      	ldr	r2, [pc, #328]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800421e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b50      	ldr	r3, [pc, #320]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	494d      	ldr	r1, [pc, #308]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d044      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d119      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e07f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d003      	beq.n	8004266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	2b03      	cmp	r3, #3
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e067      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4934      	ldr	r1, [pc, #208]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004298:	f7fe fab2 	bl	8002800 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fe faae 	bl	8002800 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e04f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 020c 	and.w	r2, r3, #12
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d1eb      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d20c      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e032      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4916      	ldr	r1, [pc, #88]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	490e      	ldr	r1, [pc, #56]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800432e:	f000 f887 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	490a      	ldr	r1, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	5ccb      	ldrb	r3, [r1, r3]
 8004342:	fa22 f303 	lsr.w	r3, r2, r3
 8004346:	4a09      	ldr	r2, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd f9ac 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023c00 	.word	0x40023c00
 8004364:	40023800 	.word	0x40023800
 8004368:	08007ee4 	.word	0x08007ee4
 800436c:	20000004 	.word	0x20000004
 8004370:	200003bc 	.word	0x200003bc

08004374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_RCC_GetHCLKFreq+0x14>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000004 	.word	0x20000004

0800438c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004390:	f7ff fff0 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4903      	ldr	r1, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	08007ef4 	.word	0x08007ef4

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b8:	f7ff ffdc 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0b5b      	lsrs	r3, r3, #13
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08007ef4 	.word	0x08007ef4

080043dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	220f      	movs	r2, #15
 80043ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0203 	and.w	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	08db      	lsrs	r3, r3, #3
 8004416:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_RCC_GetClockConfig+0x60>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	40023c00 	.word	0x40023c00

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004444:	b0ae      	sub	sp, #184	; 0xb8
 8004446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004466:	4bcb      	ldr	r3, [pc, #812]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b0c      	cmp	r3, #12
 8004470:	f200 8206 	bhi.w	8004880 <HAL_RCC_GetSysClockFreq+0x440>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044b1 	.word	0x080044b1
 8004480:	08004881 	.word	0x08004881
 8004484:	08004881 	.word	0x08004881
 8004488:	08004881 	.word	0x08004881
 800448c:	080044b9 	.word	0x080044b9
 8004490:	08004881 	.word	0x08004881
 8004494:	08004881 	.word	0x08004881
 8004498:	08004881 	.word	0x08004881
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	08004881 	.word	0x08004881
 80044a4:	08004881 	.word	0x08004881
 80044a8:	08004881 	.word	0x08004881
 80044ac:	080046b1 	.word	0x080046b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4bb9      	ldr	r3, [pc, #740]	; (8004798 <HAL_RCC_GetSysClockFreq+0x358>)
 80044b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80044b6:	e1e7      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b8:	4bb8      	ldr	r3, [pc, #736]	; (800479c <HAL_RCC_GetSysClockFreq+0x35c>)
 80044ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044be:	e1e3      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c0:	4bb4      	ldr	r3, [pc, #720]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044cc:	4bb1      	ldr	r3, [pc, #708]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d071      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d8:	4bae      	ldr	r3, [pc, #696]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	099b      	lsrs	r3, r3, #6
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044fe:	4622      	mov	r2, r4
 8004500:	462b      	mov	r3, r5
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004510:	0150      	lsls	r0, r2, #5
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4621      	mov	r1, r4
 8004518:	1a51      	subs	r1, r2, r1
 800451a:	6439      	str	r1, [r7, #64]	; 0x40
 800451c:	4629      	mov	r1, r5
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	647b      	str	r3, [r7, #68]	; 0x44
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004530:	4649      	mov	r1, r9
 8004532:	018b      	lsls	r3, r1, #6
 8004534:	4641      	mov	r1, r8
 8004536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800453a:	4641      	mov	r1, r8
 800453c:	018a      	lsls	r2, r1, #6
 800453e:	4641      	mov	r1, r8
 8004540:	1a51      	subs	r1, r2, r1
 8004542:	63b9      	str	r1, [r7, #56]	; 0x38
 8004544:	4649      	mov	r1, r9
 8004546:	eb63 0301 	sbc.w	r3, r3, r1
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004558:	4649      	mov	r1, r9
 800455a:	00cb      	lsls	r3, r1, #3
 800455c:	4641      	mov	r1, r8
 800455e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004562:	4641      	mov	r1, r8
 8004564:	00ca      	lsls	r2, r1, #3
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	4603      	mov	r3, r0
 800456c:	4622      	mov	r2, r4
 800456e:	189b      	adds	r3, r3, r2
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	462b      	mov	r3, r5
 8004574:	460a      	mov	r2, r1
 8004576:	eb42 0303 	adc.w	r3, r2, r3
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004588:	4629      	mov	r1, r5
 800458a:	024b      	lsls	r3, r1, #9
 800458c:	4621      	mov	r1, r4
 800458e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004592:	4621      	mov	r1, r4
 8004594:	024a      	lsls	r2, r1, #9
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045ac:	f7fb fe30 	bl	8000210 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ba:	e067      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045bc:	4b75      	ldr	r3, [pc, #468]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80045cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80045d6:	2300      	movs	r3, #0
 80045d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80045de:	4622      	mov	r2, r4
 80045e0:	462b      	mov	r3, r5
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	0159      	lsls	r1, r3, #5
 80045ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f0:	0150      	lsls	r0, r2, #5
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4621      	mov	r1, r4
 80045f8:	1a51      	subs	r1, r2, r1
 80045fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80045fc:	4629      	mov	r1, r5
 80045fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004610:	4649      	mov	r1, r9
 8004612:	018b      	lsls	r3, r1, #6
 8004614:	4641      	mov	r1, r8
 8004616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800461a:	4641      	mov	r1, r8
 800461c:	018a      	lsls	r2, r1, #6
 800461e:	4641      	mov	r1, r8
 8004620:	ebb2 0a01 	subs.w	sl, r2, r1
 8004624:	4649      	mov	r1, r9
 8004626:	eb63 0b01 	sbc.w	fp, r3, r1
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004636:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800463a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800463e:	4692      	mov	sl, r2
 8004640:	469b      	mov	fp, r3
 8004642:	4623      	mov	r3, r4
 8004644:	eb1a 0303 	adds.w	r3, sl, r3
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	462b      	mov	r3, r5
 800464c:	eb4b 0303 	adc.w	r3, fp, r3
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004674:	2200      	movs	r2, #0
 8004676:	673b      	str	r3, [r7, #112]	; 0x70
 8004678:	677a      	str	r2, [r7, #116]	; 0x74
 800467a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800467e:	f7fb fdc7 	bl	8000210 <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4613      	mov	r3, r2
 8004688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800468c:	4b41      	ldr	r3, [pc, #260]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	3301      	adds	r3, #1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800469e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046ae:	e0eb      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b0:	4b38      	ldr	r3, [pc, #224]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d06b      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c8:	4b32      	ldr	r3, [pc, #200]	; (8004794 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	2200      	movs	r2, #0
 80046d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	663b      	str	r3, [r7, #96]	; 0x60
 80046dc:	2300      	movs	r3, #0
 80046de:	667b      	str	r3, [r7, #100]	; 0x64
 80046e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80046e4:	4622      	mov	r2, r4
 80046e6:	462b      	mov	r3, r5
 80046e8:	f04f 0000 	mov.w	r0, #0
 80046ec:	f04f 0100 	mov.w	r1, #0
 80046f0:	0159      	lsls	r1, r3, #5
 80046f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f6:	0150      	lsls	r0, r2, #5
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4621      	mov	r1, r4
 80046fe:	1a51      	subs	r1, r2, r1
 8004700:	61b9      	str	r1, [r7, #24]
 8004702:	4629      	mov	r1, r5
 8004704:	eb63 0301 	sbc.w	r3, r3, r1
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004716:	4659      	mov	r1, fp
 8004718:	018b      	lsls	r3, r1, #6
 800471a:	4651      	mov	r1, sl
 800471c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004720:	4651      	mov	r1, sl
 8004722:	018a      	lsls	r2, r1, #6
 8004724:	4651      	mov	r1, sl
 8004726:	ebb2 0801 	subs.w	r8, r2, r1
 800472a:	4659      	mov	r1, fp
 800472c:	eb63 0901 	sbc.w	r9, r3, r1
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004740:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004744:	4690      	mov	r8, r2
 8004746:	4699      	mov	r9, r3
 8004748:	4623      	mov	r3, r4
 800474a:	eb18 0303 	adds.w	r3, r8, r3
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	462b      	mov	r3, r5
 8004752:	eb49 0303 	adc.w	r3, r9, r3
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004764:	4629      	mov	r1, r5
 8004766:	024b      	lsls	r3, r1, #9
 8004768:	4621      	mov	r1, r4
 800476a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800476e:	4621      	mov	r1, r4
 8004770:	024a      	lsls	r2, r1, #9
 8004772:	4610      	mov	r0, r2
 8004774:	4619      	mov	r1, r3
 8004776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800477a:	2200      	movs	r2, #0
 800477c:	65bb      	str	r3, [r7, #88]	; 0x58
 800477e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004780:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004784:	f7fb fd44 	bl	8000210 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004792:	e065      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x420>
 8004794:	40023800 	.word	0x40023800
 8004798:	00f42400 	.word	0x00f42400
 800479c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a0:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_GetSysClockFreq+0x458>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	2200      	movs	r2, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	4611      	mov	r1, r2
 80047ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047b0:	653b      	str	r3, [r7, #80]	; 0x50
 80047b2:	2300      	movs	r3, #0
 80047b4:	657b      	str	r3, [r7, #84]	; 0x54
 80047b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80047ba:	4642      	mov	r2, r8
 80047bc:	464b      	mov	r3, r9
 80047be:	f04f 0000 	mov.w	r0, #0
 80047c2:	f04f 0100 	mov.w	r1, #0
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047cc:	0150      	lsls	r0, r2, #5
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4641      	mov	r1, r8
 80047d4:	1a51      	subs	r1, r2, r1
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	4649      	mov	r1, r9
 80047da:	eb63 0301 	sbc.w	r3, r3, r1
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80047ec:	4659      	mov	r1, fp
 80047ee:	018b      	lsls	r3, r1, #6
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047f6:	4651      	mov	r1, sl
 80047f8:	018a      	lsls	r2, r1, #6
 80047fa:	4651      	mov	r1, sl
 80047fc:	1a54      	subs	r4, r2, r1
 80047fe:	4659      	mov	r1, fp
 8004800:	eb63 0501 	sbc.w	r5, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	00eb      	lsls	r3, r5, #3
 800480e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004812:	00e2      	lsls	r2, r4, #3
 8004814:	4614      	mov	r4, r2
 8004816:	461d      	mov	r5, r3
 8004818:	4643      	mov	r3, r8
 800481a:	18e3      	adds	r3, r4, r3
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	464b      	mov	r3, r9
 8004820:	eb45 0303 	adc.w	r3, r5, r3
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004832:	4629      	mov	r1, r5
 8004834:	028b      	lsls	r3, r1, #10
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800483c:	4621      	mov	r1, r4
 800483e:	028a      	lsls	r2, r1, #10
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004848:	2200      	movs	r2, #0
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
 800484c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800484e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004852:	f7fb fcdd 	bl	8000210 <__aeabi_uldivmod>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4613      	mov	r3, r2
 800485c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <HAL_RCC_GetSysClockFreq+0x458>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	0f1b      	lsrs	r3, r3, #28
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800486e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800487e:	e003      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800488c:	4618      	mov	r0, r3
 800488e:	37b8      	adds	r7, #184	; 0xb8
 8004890:	46bd      	mov	sp, r7
 8004892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	00f42400 	.word	0x00f42400

080048a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e28d      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8083 	beq.w	80049c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048c0:	4b94      	ldr	r3, [pc, #592]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d019      	beq.n	8004900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048cc:	4b91      	ldr	r3, [pc, #580]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048d8:	4b8e      	ldr	r3, [pc, #568]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e4:	d00c      	beq.n	8004900 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b8b      	ldr	r3, [pc, #556]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d112      	bne.n	8004918 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b88      	ldr	r3, [pc, #544]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fe:	d10b      	bne.n	8004918 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004900:	4b84      	ldr	r3, [pc, #528]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05b      	beq.n	80049c4 <HAL_RCC_OscConfig+0x124>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d157      	bne.n	80049c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e25a      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004920:	d106      	bne.n	8004930 <HAL_RCC_OscConfig+0x90>
 8004922:	4b7c      	ldr	r3, [pc, #496]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xcc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xb4>
 800493a:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a72      	ldr	r2, [pc, #456]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xcc>
 8004954:	4b6f      	ldr	r3, [pc, #444]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd ff44 	bl	8002800 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800497c:	f7fd ff40 	bl	8002800 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e21f      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xdc>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd ff30 	bl	8002800 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fd ff2c 	bl	8002800 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	; 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e20b      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x104>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d06f      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049d2:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d017      	beq.n	8004a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049de:	4b4d      	ldr	r3, [pc, #308]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d105      	bne.n	80049f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049ea:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d11c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d116      	bne.n	8004a3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_RCC_OscConfig+0x186>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e1d3      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4937      	ldr	r1, [pc, #220]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3a:	e03a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a44:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_RCC_OscConfig+0x278>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fd fed9 	bl	8002800 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a52:	f7fd fed5 	bl	8002800 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1b4      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4925      	ldr	r1, [pc, #148]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]
 8004a84:	e015      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCC_OscConfig+0x278>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd feb8 	bl	8002800 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a94:	f7fd feb4 	bl	8002800 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e193      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d036      	beq.n	8004b2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fd fe98 	bl	8002800 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7fd fe94 	bl	8002800 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e173      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x234>
 8004af2:	e01b      	b.n	8004b2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_OscConfig+0x27c>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fd fe81 	bl	8002800 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	e00e      	b.n	8004b20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fd fe7d 	bl	8002800 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d907      	bls.n	8004b20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e15c      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	42470000 	.word	0x42470000
 8004b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b20:	4b8a      	ldr	r3, [pc, #552]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ea      	bne.n	8004b02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8097 	beq.w	8004c68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3e:	4b83      	ldr	r3, [pc, #524]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	4b7f      	ldr	r3, [pc, #508]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a7e      	ldr	r2, [pc, #504]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	4b7c      	ldr	r3, [pc, #496]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b79      	ldr	r3, [pc, #484]	; (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a75      	ldr	r2, [pc, #468]	; (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fd fe3d 	bl	8002800 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fd fe39 	bl	8002800 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e118      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <HAL_RCC_OscConfig+0x4b0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x31e>
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbc:	e01c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x358>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x340>
 8004bc6:	4b61      	ldr	r3, [pc, #388]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a60      	ldr	r2, [pc, #384]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	4b5e      	ldr	r3, [pc, #376]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a5d      	ldr	r2, [pc, #372]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x358>
 8004be0:	4b5a      	ldr	r3, [pc, #360]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a59      	ldr	r2, [pc, #356]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
 8004bec:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	4a56      	ldr	r2, [pc, #344]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fd fdfe 	bl	8002800 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fd fdfa 	bl	8002800 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e0d7      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1e:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ee      	beq.n	8004c08 <HAL_RCC_OscConfig+0x368>
 8004c2a:	e014      	b.n	8004c56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fde8 	bl	8002800 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd fde4 	bl	8002800 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0c1      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4a:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ee      	bne.n	8004c34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80ad 	beq.w	8004dcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c72:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d060      	beq.n	8004d40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d145      	bne.n	8004d12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c86:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <HAL_RCC_OscConfig+0x4b4>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fd fdb8 	bl	8002800 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c94:	f7fd fdb4 	bl	8002800 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e093      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69da      	ldr	r2, [r3, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	019b      	lsls	r3, r3, #6
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	071b      	lsls	r3, r3, #28
 8004cde:	491b      	ldr	r1, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	; (8004d54 <HAL_RCC_OscConfig+0x4b4>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7fd fd89 	bl	8002800 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7fd fd85 	bl	8002800 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e064      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d04:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x452>
 8004d10:	e05c      	b.n	8004dcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_RCC_OscConfig+0x4b4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd fd72 	bl	8002800 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd fd6e 	bl	8002800 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e04d      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x480>
 8004d3e:	e045      	b.n	8004dcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e040      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d58:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <HAL_RCC_OscConfig+0x538>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d030      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d129      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d122      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d88:	4013      	ands	r3, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d119      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	3b01      	subs	r3, #1
 8004da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10f      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e041      	b.n	8004e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fb02 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 fe5e 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d001      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e04e      	b.n	8004f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a23      	ldr	r2, [pc, #140]	; (8004f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d01d      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x80>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d111      	bne.n	8004f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d010      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0201 	orr.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	e007      	b.n	8004f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40001800 	.word	0x40001800

08004f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e041      	b.n	8004ff2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f839 	bl	8004ffa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f000 fd9e 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e022      	b.n	8005082 <HAL_TIM_PWM_Start_DMA+0x72>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b04      	cmp	r3, #4
 8005040:	d109      	bne.n	8005056 <HAL_TIM_PWM_Start_DMA+0x46>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e015      	b.n	8005082 <HAL_TIM_PWM_Start_DMA+0x72>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start_DMA+0x60>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e008      	b.n	8005082 <HAL_TIM_PWM_Start_DMA+0x72>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
 8005088:	e171      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e022      	b.n	80050ea <HAL_TIM_PWM_Start_DMA+0xda>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d109      	bne.n	80050be <HAL_TIM_PWM_Start_DMA+0xae>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e015      	b.n	80050ea <HAL_TIM_PWM_Start_DMA+0xda>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d109      	bne.n	80050d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e008      	b.n	80050ea <HAL_TIM_PWM_Start_DMA+0xda>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d024      	beq.n	8005138 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start_DMA+0xee>
 80050f4:	887b      	ldrh	r3, [r7, #2]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e137      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	e016      	b.n	800513c <HAL_TIM_PWM_Start_DMA+0x12c>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511c:	e00e      	b.n	800513c <HAL_TIM_PWM_Start_DMA+0x12c>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d104      	bne.n	800512e <HAL_TIM_PWM_Start_DMA+0x11e>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800512c:	e006      	b.n	800513c <HAL_TIM_PWM_Start_DMA+0x12c>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005136:	e001      	b.n	800513c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e118      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	f200 80ae 	bhi.w	80052a0 <HAL_TIM_PWM_Start_DMA+0x290>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005181 	.word	0x08005181
 8005150:	080052a1 	.word	0x080052a1
 8005154:	080052a1 	.word	0x080052a1
 8005158:	080052a1 	.word	0x080052a1
 800515c:	080051c9 	.word	0x080051c9
 8005160:	080052a1 	.word	0x080052a1
 8005164:	080052a1 	.word	0x080052a1
 8005168:	080052a1 	.word	0x080052a1
 800516c:	08005211 	.word	0x08005211
 8005170:	080052a1 	.word	0x080052a1
 8005174:	080052a1 	.word	0x080052a1
 8005178:	080052a1 	.word	0x080052a1
 800517c:	08005259 	.word	0x08005259
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	4a7c      	ldr	r2, [pc, #496]	; (8005378 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005186:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	4a7b      	ldr	r2, [pc, #492]	; (800537c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	4a7a      	ldr	r2, [pc, #488]	; (8005380 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005196:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3334      	adds	r3, #52	; 0x34
 80051a4:	461a      	mov	r2, r3
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	f7fe fb8e 	bl	80038c8 <HAL_DMA_Start_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0db      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c4:	60da      	str	r2, [r3, #12]
      break;
 80051c6:	e06e      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	4a6a      	ldr	r2, [pc, #424]	; (8005378 <HAL_TIM_PWM_Start_DMA+0x368>)
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	4a68      	ldr	r2, [pc, #416]	; (8005380 <HAL_TIM_PWM_Start_DMA+0x370>)
 80051de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3338      	adds	r3, #56	; 0x38
 80051ec:	461a      	mov	r2, r3
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	f7fe fb6a 	bl	80038c8 <HAL_DMA_Start_IT>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0b7      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800520c:	60da      	str	r2, [r3, #12]
      break;
 800520e:	e04a      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	4a58      	ldr	r2, [pc, #352]	; (8005378 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005216:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	4a57      	ldr	r2, [pc, #348]	; (800537c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800521e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a56      	ldr	r2, [pc, #344]	; (8005380 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005226:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	333c      	adds	r3, #60	; 0x3c
 8005234:	461a      	mov	r2, r3
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	f7fe fb46 	bl	80038c8 <HAL_DMA_Start_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e093      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005254:	60da      	str	r2, [r3, #12]
      break;
 8005256:	e026      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	4a46      	ldr	r2, [pc, #280]	; (8005378 <HAL_TIM_PWM_Start_DMA+0x368>)
 800525e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	4a45      	ldr	r2, [pc, #276]	; (800537c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	4a44      	ldr	r2, [pc, #272]	; (8005380 <HAL_TIM_PWM_Start_DMA+0x370>)
 800526e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3340      	adds	r3, #64	; 0x40
 800527c:	461a      	mov	r2, r3
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	f7fe fb22 	bl	80038c8 <HAL_DMA_Start_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e06f      	b.n	800536e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800529c:	60da      	str	r2, [r3, #12]
      break;
 800529e:	e002      	b.n	80052a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	75fb      	strb	r3, [r7, #23]
      break;
 80052a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d15f      	bne.n	800536c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2201      	movs	r2, #1
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fefb 	bl	80060b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a31      	ldr	r2, [pc, #196]	; (8005384 <HAL_TIM_PWM_Start_DMA+0x374>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_PWM_Start_DMA+0x2be>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2f      	ldr	r2, [pc, #188]	; (8005388 <HAL_TIM_PWM_Start_DMA+0x378>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a25      	ldr	r2, [pc, #148]	; (8005384 <HAL_TIM_PWM_Start_DMA+0x374>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fa:	d01d      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a21      	ldr	r2, [pc, #132]	; (8005390 <HAL_TIM_PWM_Start_DMA+0x380>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1f      	ldr	r2, [pc, #124]	; (8005394 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <HAL_TIM_PWM_Start_DMA+0x388>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_TIM_PWM_Start_DMA+0x328>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1a      	ldr	r2, [pc, #104]	; (800539c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d111      	bne.n	800535c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b06      	cmp	r3, #6
 8005348:	d010      	beq.n	800536c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	e007      	b.n	800536c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	080059cd 	.word	0x080059cd
 800537c:	08005a75 	.word	0x08005a75
 8005380:	0800593b 	.word	0x0800593b
 8005384:	40010000 	.word	0x40010000
 8005388:	40010400 	.word	0x40010400
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0202 	mvn.w	r2, #2
 80053cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa77 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa69 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fa7a 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0204 	mvn.w	r2, #4
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa4d 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa3f 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa50 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b08      	cmp	r3, #8
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0208 	mvn.w	r2, #8
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2204      	movs	r2, #4
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa23 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa15 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa26 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0210 	mvn.w	r2, #16
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2208      	movs	r2, #8
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9f9 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f9eb 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9fc 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0201 	mvn.w	r2, #1
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb fed0 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fe5c 	bl	8006208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d10e      	bne.n	800557c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d107      	bne.n	800557c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9cb 	bl	8005912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b20      	cmp	r3, #32
 8005588:	d10e      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0220 	mvn.w	r2, #32
 80055a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fe26 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e0ae      	b.n	800572c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	f200 809f 	bhi.w	800571c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	08005619 	.word	0x08005619
 80055e8:	0800571d 	.word	0x0800571d
 80055ec:	0800571d 	.word	0x0800571d
 80055f0:	0800571d 	.word	0x0800571d
 80055f4:	08005659 	.word	0x08005659
 80055f8:	0800571d 	.word	0x0800571d
 80055fc:	0800571d 	.word	0x0800571d
 8005600:	0800571d 	.word	0x0800571d
 8005604:	0800569b 	.word	0x0800569b
 8005608:	0800571d 	.word	0x0800571d
 800560c:	0800571d 	.word	0x0800571d
 8005610:	0800571d 	.word	0x0800571d
 8005614:	080056db 	.word	0x080056db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fafc 	bl	8005c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0204 	bic.w	r2, r2, #4
 8005642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6999      	ldr	r1, [r3, #24]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]
      break;
 8005656:	e064      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fb4c 	bl	8005cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6999      	ldr	r1, [r3, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	619a      	str	r2, [r3, #24]
      break;
 8005698:	e043      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fba1 	bl	8005de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0208 	orr.w	r2, r2, #8
 80056b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0204 	bic.w	r2, r2, #4
 80056c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69d9      	ldr	r1, [r3, #28]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	61da      	str	r2, [r3, #28]
      break;
 80056d8:	e023      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fbf5 	bl	8005ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69d9      	ldr	r1, [r3, #28]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	021a      	lsls	r2, r3, #8
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	61da      	str	r2, [r3, #28]
      break;
 800571a:	e002      	b.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIM_ConfigClockSource+0x1c>
 800574c:	2302      	movs	r3, #2
 800574e:	e0b4      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x186>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800576e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005788:	d03e      	beq.n	8005808 <HAL_TIM_ConfigClockSource+0xd4>
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578e:	f200 8087 	bhi.w	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	f000 8086 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x172>
 800579a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579e:	d87f      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b70      	cmp	r3, #112	; 0x70
 80057a2:	d01a      	beq.n	80057da <HAL_TIM_ConfigClockSource+0xa6>
 80057a4:	2b70      	cmp	r3, #112	; 0x70
 80057a6:	d87b      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b60      	cmp	r3, #96	; 0x60
 80057aa:	d050      	beq.n	800584e <HAL_TIM_ConfigClockSource+0x11a>
 80057ac:	2b60      	cmp	r3, #96	; 0x60
 80057ae:	d877      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d03c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xfa>
 80057b4:	2b50      	cmp	r3, #80	; 0x50
 80057b6:	d873      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d058      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x13a>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d86f      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b30      	cmp	r3, #48	; 0x30
 80057c2:	d064      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057c4:	2b30      	cmp	r3, #48	; 0x30
 80057c6:	d86b      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d060      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d867      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05c      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d05a      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	e062      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6899      	ldr	r1, [r3, #8]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f000 fc41 	bl	8006070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
      break;
 8005806:	e04f      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6818      	ldr	r0, [r3, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f000 fc2a 	bl	8006070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582a:	609a      	str	r2, [r3, #8]
      break;
 800582c:	e03c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6859      	ldr	r1, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	461a      	mov	r2, r3
 800583c:	f000 fb9e 	bl	8005f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2150      	movs	r1, #80	; 0x50
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fbf7 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 800584c:	e02c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	461a      	mov	r2, r3
 800585c:	f000 fbbd 	bl	8005fda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2160      	movs	r1, #96	; 0x60
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fbe7 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 800586c:	e01c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	461a      	mov	r2, r3
 800587c:	f000 fb7e 	bl	8005f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fbd7 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 800588c:	e00c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f000 fbce 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 800589e:	e003      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      break;
 80058a4:	e000      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	429a      	cmp	r2, r3
 8005950:	d107      	bne.n	8005962 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	e02a      	b.n	80059b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d107      	bne.n	800597c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2202      	movs	r2, #2
 8005970:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800597a:	e01d      	b.n	80059b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d107      	bne.n	8005996 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005994:	e010      	b.n	80059b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	429a      	cmp	r2, r3
 800599e:	d107      	bne.n	80059b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2208      	movs	r2, #8
 80059a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ae:	e003      	b.n	80059b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ffb4 	bl	8005926 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d10b      	bne.n	80059fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d136      	bne.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fa:	e031      	b.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d10b      	bne.n	8005a1e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d125      	bne.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a1c:	e020      	b.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d10b      	bne.n	8005a40 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d114      	bne.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3e:	e00f      	b.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d10a      	bne.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff ff42 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d103      	bne.n	8005a94 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	771a      	strb	r2, [r3, #28]
 8005a92:	e019      	b.n	8005ac8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d103      	bne.n	8005aa6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	771a      	strb	r2, [r3, #28]
 8005aa4:	e010      	b.n	8005ac8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d103      	bne.n	8005ab8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	771a      	strb	r2, [r3, #28]
 8005ab6:	e007      	b.n	8005ac8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d102      	bne.n	8005ac8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff ff18 	bl	80058fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2f      	ldr	r2, [pc, #188]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d027      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d023      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01f      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d017      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <TIM_Base_SetConfig+0x128>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a27      	ldr	r2, [pc, #156]	; (8005c08 <TIM_Base_SetConfig+0x12c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00f      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <TIM_Base_SetConfig+0x130>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <TIM_Base_SetConfig+0x134>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <TIM_Base_SetConfig+0x138>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a23      	ldr	r2, [pc, #140]	; (8005c18 <TIM_Base_SetConfig+0x13c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d108      	bne.n	8005ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800
 8005c10:	40001800 	.word	0x40001800
 8005c14:	40001c00 	.word	0x40001c00
 8005c18:	40002000 	.word	0x40002000

08005c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f023 0302 	bic.w	r3, r3, #2
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a20      	ldr	r2, [pc, #128]	; (8005cf4 <TIM_OC1_SetConfig+0xd8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC1_SetConfig+0x64>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <TIM_OC1_SetConfig+0xdc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10c      	bne.n	8005c9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0308 	bic.w	r3, r3, #8
 8005c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 0304 	bic.w	r3, r3, #4
 8005c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <TIM_OC1_SetConfig+0xd8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC1_SetConfig+0x8e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <TIM_OC1_SetConfig+0xdc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d111      	bne.n	8005cce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0320 	bic.w	r3, r3, #32
 8005d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <TIM_OC2_SetConfig+0xe4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC2_SetConfig+0x68>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <TIM_OC2_SetConfig+0xe8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10d      	bne.n	8005d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC2_SetConfig+0xe4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0x94>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <TIM_OC2_SetConfig+0xe8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <TIM_OC3_SetConfig+0xe0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC3_SetConfig+0x66>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10d      	bne.n	8005e6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <TIM_OC3_SetConfig+0xe0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC3_SetConfig+0x92>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d113      	bne.n	8005ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <TIM_OC4_SetConfig+0xa4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC4_SetConfig+0x68>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <TIM_OC4_SetConfig+0xa8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400

08005f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 030a 	bic.w	r3, r3, #10
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b087      	sub	sp, #28
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0210 	bic.w	r2, r3, #16
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	f043 0307 	orr.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2201      	movs	r2, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1a      	ldr	r2, [r3, #32]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006110:	2302      	movs	r3, #2
 8006112:	e05a      	b.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006160:	d01d      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d10c      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40001800 	.word	0x40001800

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e03f      	b.n	80062ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fb f9ea 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2224      	movs	r2, #36	; 0x24
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f829 	bl	80062b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062bc:	b0c0      	sub	sp, #256	; 0x100
 80062be:	af00      	add	r7, sp, #0
 80062c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	68d9      	ldr	r1, [r3, #12]
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	ea40 0301 	orr.w	r3, r0, r1
 80062e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006310:	f021 010c 	bic.w	r1, r1, #12
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800631e:	430b      	orrs	r3, r1
 8006320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	6999      	ldr	r1, [r3, #24]
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	ea40 0301 	orr.w	r3, r0, r1
 800633e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b8f      	ldr	r3, [pc, #572]	; (8006584 <UART_SetConfig+0x2cc>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d005      	beq.n	8006358 <UART_SetConfig+0xa0>
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b8d      	ldr	r3, [pc, #564]	; (8006588 <UART_SetConfig+0x2d0>)
 8006354:	429a      	cmp	r2, r3
 8006356:	d104      	bne.n	8006362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fe f82c 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 800635c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006360:	e003      	b.n	800636a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006362:	f7fe f813 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 8006366:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006374:	f040 810c 	bne.w	8006590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800637c:	2200      	movs	r2, #0
 800637e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	1891      	adds	r1, r2, r2
 8006390:	65b9      	str	r1, [r7, #88]	; 0x58
 8006392:	415b      	adcs	r3, r3
 8006394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800639a:	4621      	mov	r1, r4
 800639c:	eb12 0801 	adds.w	r8, r2, r1
 80063a0:	4629      	mov	r1, r5
 80063a2:	eb43 0901 	adc.w	r9, r3, r1
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ba:	4690      	mov	r8, r2
 80063bc:	4699      	mov	r9, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	eb18 0303 	adds.w	r3, r8, r3
 80063c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063c8:	462b      	mov	r3, r5
 80063ca:	eb49 0303 	adc.w	r3, r9, r3
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063e6:	460b      	mov	r3, r1
 80063e8:	18db      	adds	r3, r3, r3
 80063ea:	653b      	str	r3, [r7, #80]	; 0x50
 80063ec:	4613      	mov	r3, r2
 80063ee:	eb42 0303 	adc.w	r3, r2, r3
 80063f2:	657b      	str	r3, [r7, #84]	; 0x54
 80063f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063fc:	f7f9 ff08 	bl	8000210 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4b61      	ldr	r3, [pc, #388]	; (800658c <UART_SetConfig+0x2d4>)
 8006406:	fba3 2302 	umull	r2, r3, r3, r2
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	011c      	lsls	r4, r3, #4
 800640e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006418:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800641c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	1891      	adds	r1, r2, r2
 8006426:	64b9      	str	r1, [r7, #72]	; 0x48
 8006428:	415b      	adcs	r3, r3
 800642a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006430:	4641      	mov	r1, r8
 8006432:	eb12 0a01 	adds.w	sl, r2, r1
 8006436:	4649      	mov	r1, r9
 8006438:	eb43 0b01 	adc.w	fp, r3, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800644c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006450:	4692      	mov	sl, r2
 8006452:	469b      	mov	fp, r3
 8006454:	4643      	mov	r3, r8
 8006456:	eb1a 0303 	adds.w	r3, sl, r3
 800645a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800645e:	464b      	mov	r3, r9
 8006460:	eb4b 0303 	adc.w	r3, fp, r3
 8006464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800647c:	460b      	mov	r3, r1
 800647e:	18db      	adds	r3, r3, r3
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
 8006482:	4613      	mov	r3, r2
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	647b      	str	r3, [r7, #68]	; 0x44
 800648a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800648e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006492:	f7f9 febd 	bl	8000210 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4611      	mov	r1, r2
 800649c:	4b3b      	ldr	r3, [pc, #236]	; (800658c <UART_SetConfig+0x2d4>)
 800649e:	fba3 2301 	umull	r2, r3, r3, r1
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2264      	movs	r2, #100	; 0x64
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	1acb      	subs	r3, r1, r3
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064b2:	4b36      	ldr	r3, [pc, #216]	; (800658c <UART_SetConfig+0x2d4>)
 80064b4:	fba3 2302 	umull	r2, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c0:	441c      	add	r4, r3
 80064c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	1891      	adds	r1, r2, r2
 80064da:	63b9      	str	r1, [r7, #56]	; 0x38
 80064dc:	415b      	adcs	r3, r3
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064e4:	4641      	mov	r1, r8
 80064e6:	1851      	adds	r1, r2, r1
 80064e8:	6339      	str	r1, [r7, #48]	; 0x30
 80064ea:	4649      	mov	r1, r9
 80064ec:	414b      	adcs	r3, r1
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064fc:	4659      	mov	r1, fp
 80064fe:	00cb      	lsls	r3, r1, #3
 8006500:	4651      	mov	r1, sl
 8006502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006506:	4651      	mov	r1, sl
 8006508:	00ca      	lsls	r2, r1, #3
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	4603      	mov	r3, r0
 8006510:	4642      	mov	r2, r8
 8006512:	189b      	adds	r3, r3, r2
 8006514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006518:	464b      	mov	r3, r9
 800651a:	460a      	mov	r2, r1
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006530:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006538:	460b      	mov	r3, r1
 800653a:	18db      	adds	r3, r3, r3
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
 800653e:	4613      	mov	r3, r2
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800654a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800654e:	f7f9 fe5f 	bl	8000210 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <UART_SetConfig+0x2d4>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	; 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	3332      	adds	r3, #50	; 0x32
 800656a:	4a08      	ldr	r2, [pc, #32]	; (800658c <UART_SetConfig+0x2d4>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 0207 	and.w	r2, r3, #7
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4422      	add	r2, r4
 800657e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006580:	e105      	b.n	800678e <UART_SetConfig+0x4d6>
 8006582:	bf00      	nop
 8006584:	40011000 	.word	0x40011000
 8006588:	40011400 	.word	0x40011400
 800658c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800659a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800659e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	1891      	adds	r1, r2, r2
 80065a8:	6239      	str	r1, [r7, #32]
 80065aa:	415b      	adcs	r3, r3
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
 80065ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065b2:	4641      	mov	r1, r8
 80065b4:	1854      	adds	r4, r2, r1
 80065b6:	4649      	mov	r1, r9
 80065b8:	eb43 0501 	adc.w	r5, r3, r1
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	00eb      	lsls	r3, r5, #3
 80065c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ca:	00e2      	lsls	r2, r4, #3
 80065cc:	4614      	mov	r4, r2
 80065ce:	461d      	mov	r5, r3
 80065d0:	4643      	mov	r3, r8
 80065d2:	18e3      	adds	r3, r4, r3
 80065d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065d8:	464b      	mov	r3, r9
 80065da:	eb45 0303 	adc.w	r3, r5, r3
 80065de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065fe:	4629      	mov	r1, r5
 8006600:	008b      	lsls	r3, r1, #2
 8006602:	4621      	mov	r1, r4
 8006604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006608:	4621      	mov	r1, r4
 800660a:	008a      	lsls	r2, r1, #2
 800660c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006610:	f7f9 fdfe 	bl	8000210 <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4b60      	ldr	r3, [pc, #384]	; (800679c <UART_SetConfig+0x4e4>)
 800661a:	fba3 2302 	umull	r2, r3, r3, r2
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	011c      	lsls	r4, r3, #4
 8006622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006626:	2200      	movs	r2, #0
 8006628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800662c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	1891      	adds	r1, r2, r2
 800663a:	61b9      	str	r1, [r7, #24]
 800663c:	415b      	adcs	r3, r3
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006644:	4641      	mov	r1, r8
 8006646:	1851      	adds	r1, r2, r1
 8006648:	6139      	str	r1, [r7, #16]
 800664a:	4649      	mov	r1, r9
 800664c:	414b      	adcs	r3, r1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800665c:	4659      	mov	r1, fp
 800665e:	00cb      	lsls	r3, r1, #3
 8006660:	4651      	mov	r1, sl
 8006662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006666:	4651      	mov	r1, sl
 8006668:	00ca      	lsls	r2, r1, #3
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	4603      	mov	r3, r0
 8006670:	4642      	mov	r2, r8
 8006672:	189b      	adds	r3, r3, r2
 8006674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006678:	464b      	mov	r3, r9
 800667a:	460a      	mov	r2, r1
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	67bb      	str	r3, [r7, #120]	; 0x78
 800668e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800669c:	4649      	mov	r1, r9
 800669e:	008b      	lsls	r3, r1, #2
 80066a0:	4641      	mov	r1, r8
 80066a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a6:	4641      	mov	r1, r8
 80066a8:	008a      	lsls	r2, r1, #2
 80066aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066ae:	f7f9 fdaf 	bl	8000210 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4b39      	ldr	r3, [pc, #228]	; (800679c <UART_SetConfig+0x4e4>)
 80066b8:	fba3 1302 	umull	r1, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	2164      	movs	r1, #100	; 0x64
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	3332      	adds	r3, #50	; 0x32
 80066ca:	4a34      	ldr	r2, [pc, #208]	; (800679c <UART_SetConfig+0x4e4>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d6:	441c      	add	r4, r3
 80066d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066dc:	2200      	movs	r2, #0
 80066de:	673b      	str	r3, [r7, #112]	; 0x70
 80066e0:	677a      	str	r2, [r7, #116]	; 0x74
 80066e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066e6:	4642      	mov	r2, r8
 80066e8:	464b      	mov	r3, r9
 80066ea:	1891      	adds	r1, r2, r2
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	415b      	adcs	r3, r3
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f6:	4641      	mov	r1, r8
 80066f8:	1851      	adds	r1, r2, r1
 80066fa:	6039      	str	r1, [r7, #0]
 80066fc:	4649      	mov	r1, r9
 80066fe:	414b      	adcs	r3, r1
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800670e:	4659      	mov	r1, fp
 8006710:	00cb      	lsls	r3, r1, #3
 8006712:	4651      	mov	r1, sl
 8006714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006718:	4651      	mov	r1, sl
 800671a:	00ca      	lsls	r2, r1, #3
 800671c:	4610      	mov	r0, r2
 800671e:	4619      	mov	r1, r3
 8006720:	4603      	mov	r3, r0
 8006722:	4642      	mov	r2, r8
 8006724:	189b      	adds	r3, r3, r2
 8006726:	66bb      	str	r3, [r7, #104]	; 0x68
 8006728:	464b      	mov	r3, r9
 800672a:	460a      	mov	r2, r1
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	663b      	str	r3, [r7, #96]	; 0x60
 800673c:	667a      	str	r2, [r7, #100]	; 0x64
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800674a:	4649      	mov	r1, r9
 800674c:	008b      	lsls	r3, r1, #2
 800674e:	4641      	mov	r1, r8
 8006750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006754:	4641      	mov	r1, r8
 8006756:	008a      	lsls	r2, r1, #2
 8006758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800675c:	f7f9 fd58 	bl	8000210 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4b0d      	ldr	r3, [pc, #52]	; (800679c <UART_SetConfig+0x4e4>)
 8006766:	fba3 1302 	umull	r1, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2164      	movs	r1, #100	; 0x64
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	3332      	adds	r3, #50	; 0x32
 8006778:	4a08      	ldr	r2, [pc, #32]	; (800679c <UART_SetConfig+0x4e4>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 020f 	and.w	r2, r3, #15
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4422      	add	r2, r4
 800678c:	609a      	str	r2, [r3, #8]
}
 800678e:	bf00      	nop
 8006790:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006794:	46bd      	mov	sp, r7
 8006796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679a:	bf00      	nop
 800679c:	51eb851f 	.word	0x51eb851f

080067a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b2:	2b84      	cmp	r3, #132	; 0x84
 80067b4:	d005      	beq.n	80067c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	3303      	adds	r3, #3
 80067c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067d4:	f000 faf6 	bl	8006dc4 <vTaskStartScheduler>
  
  return osOK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	bd80      	pop	{r7, pc}

080067de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e0:	b089      	sub	sp, #36	; 0x24
 80067e2:	af04      	add	r7, sp, #16
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <osThreadCreate+0x54>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01c      	beq.n	8006832 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685c      	ldr	r4, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681d      	ldr	r5, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691e      	ldr	r6, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff ffc8 	bl	80067a0 <makeFreeRtosPriority>
 8006810:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800681a:	9202      	str	r2, [sp, #8]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	9100      	str	r1, [sp, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4632      	mov	r2, r6
 8006824:	4629      	mov	r1, r5
 8006826:	4620      	mov	r0, r4
 8006828:	f000 f8ed 	bl	8006a06 <xTaskCreateStatic>
 800682c:	4603      	mov	r3, r0
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e01c      	b.n	800686c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685c      	ldr	r4, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800683e:	b29e      	uxth	r6, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ffaa 	bl	80067a0 <makeFreeRtosPriority>
 800684c:	4602      	mov	r2, r0
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	9200      	str	r2, [sp, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	4632      	mov	r2, r6
 800685a:	4629      	mov	r1, r5
 800685c:	4620      	mov	r0, r4
 800685e:	f000 f92f 	bl	8006ac0 <xTaskCreate>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d001      	beq.n	800686c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800686c:	68fb      	ldr	r3, [r7, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006876 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <osDelay+0x16>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	e000      	b.n	800688e <osDelay+0x18>
 800688c:	2301      	movs	r3, #1
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fa64 	bl	8006d5c <vTaskDelay>
  
  return osOK;
 8006894:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f103 0208 	add.w	r2, r3, #8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f04f 32ff 	mov.w	r2, #4294967295
 80068b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f103 0208 	add.w	r2, r3, #8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f103 0208 	add.w	r2, r3, #8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	d103      	bne.n	8006960 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e00c      	b.n	800697a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3308      	adds	r3, #8
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e002      	b.n	800696e <vListInsert+0x2e>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	d2f6      	bcs.n	8006968 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
}
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069b2:	b480      	push	{r7}
 80069b4:	b085      	sub	sp, #20
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6892      	ldr	r2, [r2, #8]
 80069c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6852      	ldr	r2, [r2, #4]
 80069d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d103      	bne.n	80069e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b08e      	sub	sp, #56	; 0x38
 8006a0a:	af04      	add	r7, sp, #16
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <xTaskCreateStatic+0x46>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	61fb      	str	r3, [r7, #28]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a4c:	23b4      	movs	r3, #180	; 0xb4
 8006a4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2bb4      	cmp	r3, #180	; 0xb4
 8006a54:	d00a      	beq.n	8006a6c <xTaskCreateStatic+0x66>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61bb      	str	r3, [r7, #24]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01e      	beq.n	8006ab2 <xTaskCreateStatic+0xac>
 8006a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01b      	beq.n	8006ab2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9303      	str	r3, [sp, #12]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	9302      	str	r3, [sp, #8]
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f851 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aac:	f000 f8ec 	bl	8006c88 <prvAddNewTaskToReadyList>
 8006ab0:	e001      	b.n	8006ab6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3728      	adds	r7, #40	; 0x28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	; 0x30
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 feef 	bl	80078b8 <pvPortMalloc>
 8006ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae2:	20b4      	movs	r0, #180	; 0xb4
 8006ae4:	f000 fee8 	bl	80078b8 <pvPortMalloc>
 8006ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
 8006af6:	e005      	b.n	8006b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006af8:	6978      	ldr	r0, [r7, #20]
 8006afa:	f000 ffa9 	bl	8007a50 <vPortFree>
 8006afe:	e001      	b.n	8006b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	9302      	str	r3, [sp, #8]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f80f 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b2e:	69f8      	ldr	r0, [r7, #28]
 8006b30:	f000 f8aa 	bl	8006c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e002      	b.n	8006b40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b40:	69bb      	ldr	r3, [r7, #24]
	}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b64:	3b01      	subs	r3, #1
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f023 0307 	bic.w	r3, r3, #7
 8006b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	617b      	str	r3, [r7, #20]
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01f      	beq.n	8006bda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	e012      	b.n	8006bc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	7819      	ldrb	r1, [r3, #0]
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	3334      	adds	r3, #52	; 0x34
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d006      	beq.n	8006bce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b0f      	cmp	r3, #15
 8006bca:	d9e9      	bls.n	8006ba0 <prvInitialiseNewTask+0x54>
 8006bcc:	e000      	b.n	8006bd0 <prvInitialiseNewTask+0x84>
			{
				break;
 8006bce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd8:	e003      	b.n	8006be2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b06      	cmp	r3, #6
 8006be6:	d901      	bls.n	8006bec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006be8:	2306      	movs	r3, #6
 8006bea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fe6b 	bl	80068de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3318      	adds	r3, #24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fe66 	bl	80068de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	f1c3 0207 	rsb	r2, r3, #7
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	334c      	adds	r3, #76	; 0x4c
 8006c3c:	2260      	movs	r2, #96	; 0x60
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 f849 	bl	8007cd8 <memset>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <prvInitialiseNewTask+0x130>)
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <prvInitialiseNewTask+0x134>)
 8006c50:	655a      	str	r2, [r3, #84]	; 0x54
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	4a0b      	ldr	r2, [pc, #44]	; (8006c84 <prvInitialiseNewTask+0x138>)
 8006c56:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f000 fc1f 	bl	80074a0 <pxPortInitialiseStack>
 8006c62:	4602      	mov	r2, r0
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	08007f24 	.word	0x08007f24
 8006c80:	08007f44 	.word	0x08007f44
 8006c84:	08007f04 	.word	0x08007f04

08006c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c90:	f000 fd30 	bl	80076f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c94:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <prvAddNewTaskToReadyList+0xb8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	4a29      	ldr	r2, [pc, #164]	; (8006d40 <prvAddNewTaskToReadyList+0xb8>)
 8006c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c9e:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ca6:	4a27      	ldr	r2, [pc, #156]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cac:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <prvAddNewTaskToReadyList+0xb8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d110      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cb4:	f000 facc 	bl	8007250 <prvInitialiseTaskLists>
 8006cb8:	e00d      	b.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <prvAddNewTaskToReadyList+0xc0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cc2:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d802      	bhi.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cd6:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <prvAddNewTaskToReadyList+0xcc>)
 8006d00:	441a      	add	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7ff fdf5 	bl	80068f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d0e:	f000 fd21 	bl	8007754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d12:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <prvAddNewTaskToReadyList+0xc0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvAddNewTaskToReadyList+0xbc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d207      	bcs.n	8006d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <prvAddNewTaskToReadyList+0xd0>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20003e2c 	.word	0x20003e2c
 8006d44:	20003d2c 	.word	0x20003d2c
 8006d48:	20003e38 	.word	0x20003e38
 8006d4c:	20003e48 	.word	0x20003e48
 8006d50:	20003e34 	.word	0x20003e34
 8006d54:	20003d30 	.word	0x20003d30
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d017      	beq.n	8006d9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <vTaskDelay+0x60>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <vTaskDelay+0x30>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60bb      	str	r3, [r7, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d8c:	f000 f884 	bl	8006e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d90:	2100      	movs	r1, #0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb1e 	bl	80073d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d98:	f000 f88c 	bl	8006eb4 <xTaskResumeAll>
 8006d9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006da4:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <vTaskDelay+0x64>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20003e54 	.word	0x20003e54
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	; 0x28
 8006dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dd2:	463a      	mov	r2, r7
 8006dd4:	1d39      	adds	r1, r7, #4
 8006dd6:	f107 0308 	add.w	r3, r7, #8
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7f9 fc32 	bl	8000644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	9202      	str	r2, [sp, #8]
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	2300      	movs	r3, #0
 8006df0:	460a      	mov	r2, r1
 8006df2:	4921      	ldr	r1, [pc, #132]	; (8006e78 <vTaskStartScheduler+0xb4>)
 8006df4:	4821      	ldr	r0, [pc, #132]	; (8006e7c <vTaskStartScheduler+0xb8>)
 8006df6:	f7ff fe06 	bl	8006a06 <xTaskCreateStatic>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <vTaskStartScheduler+0xbc>)
 8006dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e00:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <vTaskStartScheduler+0xbc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e001      	b.n	8006e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d11b      	bne.n	8006e50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	613b      	str	r3, [r7, #16]
}
 8006e2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e2c:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <vTaskStartScheduler+0xc0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	334c      	adds	r3, #76	; 0x4c
 8006e32:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <vTaskStartScheduler+0xc4>)
 8006e34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e36:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <vTaskStartScheduler+0xc8>)
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <vTaskStartScheduler+0xcc>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e44:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <vTaskStartScheduler+0xd0>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e4a:	f000 fbb1 	bl	80075b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e4e:	e00e      	b.n	8006e6e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d10a      	bne.n	8006e6e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <vTaskStartScheduler+0xa8>
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	08007edc 	.word	0x08007edc
 8006e7c:	08007221 	.word	0x08007221
 8006e80:	20003e50 	.word	0x20003e50
 8006e84:	20003d2c 	.word	0x20003d2c
 8006e88:	200003c8 	.word	0x200003c8
 8006e8c:	20003e4c 	.word	0x20003e4c
 8006e90:	20003e38 	.word	0x20003e38
 8006e94:	20003e30 	.word	0x20003e30

08006e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <vTaskSuspendAll+0x18>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	4a03      	ldr	r2, [pc, #12]	; (8006eb0 <vTaskSuspendAll+0x18>)
 8006ea4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20003e54 	.word	0x20003e54

08006eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ec2:	4b41      	ldr	r3, [pc, #260]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	603b      	str	r3, [r7, #0]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ee0:	f000 fc08 	bl	80076f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ee4:	4b38      	ldr	r3, [pc, #224]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	4a37      	ldr	r2, [pc, #220]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eee:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <xTaskResumeAll+0x114>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d161      	bne.n	8006fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ef6:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <xTaskResumeAll+0x118>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d05d      	beq.n	8006fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006efe:	e02e      	b.n	8006f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f00:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <xTaskResumeAll+0x11c>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff fd50 	bl	80069b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff fd4b 	bl	80069b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	2201      	movs	r2, #1
 8006f22:	409a      	lsls	r2, r3
 8006f24:	4b2b      	ldr	r3, [pc, #172]	; (8006fd4 <xTaskResumeAll+0x120>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	4a2a      	ldr	r2, [pc, #168]	; (8006fd4 <xTaskResumeAll+0x120>)
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <xTaskResumeAll+0x124>)
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7ff fcd7 	bl	80068f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	4b23      	ldr	r3, [pc, #140]	; (8006fdc <xTaskResumeAll+0x128>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d302      	bcc.n	8006f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f58:	4b21      	ldr	r3, [pc, #132]	; (8006fe0 <xTaskResumeAll+0x12c>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <xTaskResumeAll+0x11c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1cc      	bne.n	8006f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f6c:	f000 fa12 	bl	8007394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f70:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <xTaskResumeAll+0x130>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f7c:	f000 f836 	bl	8006fec <xTaskIncrementTick>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <xTaskResumeAll+0x12c>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f1      	bne.n	8006f7c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <xTaskResumeAll+0x130>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <xTaskResumeAll+0x12c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006faa:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <xTaskResumeAll+0x134>)
 8006fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fba:	f000 fbcb 	bl	8007754 <vPortExitCritical>

	return xAlreadyYielded;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20003e54 	.word	0x20003e54
 8006fcc:	20003e2c 	.word	0x20003e2c
 8006fd0:	20003dec 	.word	0x20003dec
 8006fd4:	20003e34 	.word	0x20003e34
 8006fd8:	20003d30 	.word	0x20003d30
 8006fdc:	20003d2c 	.word	0x20003d2c
 8006fe0:	20003e40 	.word	0x20003e40
 8006fe4:	20003e3c 	.word	0x20003e3c
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff6:	4b4e      	ldr	r3, [pc, #312]	; (8007130 <xTaskIncrementTick+0x144>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 808e 	bne.w	800711c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007000:	4b4c      	ldr	r3, [pc, #304]	; (8007134 <xTaskIncrementTick+0x148>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007008:	4a4a      	ldr	r2, [pc, #296]	; (8007134 <xTaskIncrementTick+0x148>)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d120      	bne.n	8007056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007014:	4b48      	ldr	r3, [pc, #288]	; (8007138 <xTaskIncrementTick+0x14c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <xTaskIncrementTick+0x48>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	603b      	str	r3, [r7, #0]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xTaskIncrementTick+0x46>
 8007034:	4b40      	ldr	r3, [pc, #256]	; (8007138 <xTaskIncrementTick+0x14c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	4b40      	ldr	r3, [pc, #256]	; (800713c <xTaskIncrementTick+0x150>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a3e      	ldr	r2, [pc, #248]	; (8007138 <xTaskIncrementTick+0x14c>)
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	4a3e      	ldr	r2, [pc, #248]	; (800713c <xTaskIncrementTick+0x150>)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	4b3d      	ldr	r3, [pc, #244]	; (8007140 <xTaskIncrementTick+0x154>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	4a3c      	ldr	r2, [pc, #240]	; (8007140 <xTaskIncrementTick+0x154>)
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	f000 f99f 	bl	8007394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007056:	4b3b      	ldr	r3, [pc, #236]	; (8007144 <xTaskIncrementTick+0x158>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	429a      	cmp	r2, r3
 800705e:	d348      	bcc.n	80070f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007060:	4b35      	ldr	r3, [pc, #212]	; (8007138 <xTaskIncrementTick+0x14c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706a:	4b36      	ldr	r3, [pc, #216]	; (8007144 <xTaskIncrementTick+0x158>)
 800706c:	f04f 32ff 	mov.w	r2, #4294967295
 8007070:	601a      	str	r2, [r3, #0]
					break;
 8007072:	e03e      	b.n	80070f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007074:	4b30      	ldr	r3, [pc, #192]	; (8007138 <xTaskIncrementTick+0x14c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d203      	bcs.n	8007094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <xTaskIncrementTick+0x158>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007092:	e02e      	b.n	80070f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3304      	adds	r3, #4
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fc8a 	bl	80069b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	3318      	adds	r3, #24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fc81 	bl	80069b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	4b23      	ldr	r3, [pc, #140]	; (8007148 <xTaskIncrementTick+0x15c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4313      	orrs	r3, r2
 80070be:	4a22      	ldr	r2, [pc, #136]	; (8007148 <xTaskIncrementTick+0x15c>)
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4a1f      	ldr	r2, [pc, #124]	; (800714c <xTaskIncrementTick+0x160>)
 80070d0:	441a      	add	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f7ff fc0d 	bl	80068f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e2:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <xTaskIncrementTick+0x164>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3b9      	bcc.n	8007060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070f0:	e7b6      	b.n	8007060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <xTaskIncrementTick+0x164>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4914      	ldr	r1, [pc, #80]	; (800714c <xTaskIncrementTick+0x160>)
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d901      	bls.n	800710e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800710a:	2301      	movs	r3, #1
 800710c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <xTaskIncrementTick+0x168>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e004      	b.n	8007126 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <xTaskIncrementTick+0x16c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	4a0d      	ldr	r2, [pc, #52]	; (8007158 <xTaskIncrementTick+0x16c>)
 8007124:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007126:	697b      	ldr	r3, [r7, #20]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20003e54 	.word	0x20003e54
 8007134:	20003e30 	.word	0x20003e30
 8007138:	20003de4 	.word	0x20003de4
 800713c:	20003de8 	.word	0x20003de8
 8007140:	20003e44 	.word	0x20003e44
 8007144:	20003e4c 	.word	0x20003e4c
 8007148:	20003e34 	.word	0x20003e34
 800714c:	20003d30 	.word	0x20003d30
 8007150:	20003d2c 	.word	0x20003d2c
 8007154:	20003e40 	.word	0x20003e40
 8007158:	20003e3c 	.word	0x20003e3c

0800715c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007162:	4b29      	ldr	r3, [pc, #164]	; (8007208 <vTaskSwitchContext+0xac>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800716a:	4b28      	ldr	r3, [pc, #160]	; (800720c <vTaskSwitchContext+0xb0>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007170:	e044      	b.n	80071fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007172:	4b26      	ldr	r3, [pc, #152]	; (800720c <vTaskSwitchContext+0xb0>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007178:	4b25      	ldr	r3, [pc, #148]	; (8007210 <vTaskSwitchContext+0xb4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	fab3 f383 	clz	r3, r3
 8007184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007186:	7afb      	ldrb	r3, [r7, #11]
 8007188:	f1c3 031f 	rsb	r3, r3, #31
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	4921      	ldr	r1, [pc, #132]	; (8007214 <vTaskSwitchContext+0xb8>)
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <vTaskSwitchContext+0x5a>
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a14      	ldr	r2, [pc, #80]	; (8007214 <vTaskSwitchContext+0xb8>)
 80071c4:	4413      	add	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3308      	adds	r3, #8
 80071da:	429a      	cmp	r2, r3
 80071dc:	d104      	bne.n	80071e8 <vTaskSwitchContext+0x8c>
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	4a0a      	ldr	r2, [pc, #40]	; (8007218 <vTaskSwitchContext+0xbc>)
 80071f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <vTaskSwitchContext+0xbc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	334c      	adds	r3, #76	; 0x4c
 80071f8:	4a08      	ldr	r2, [pc, #32]	; (800721c <vTaskSwitchContext+0xc0>)
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	20003e54 	.word	0x20003e54
 800720c:	20003e40 	.word	0x20003e40
 8007210:	20003e34 	.word	0x20003e34
 8007214:	20003d30 	.word	0x20003d30
 8007218:	20003d2c 	.word	0x20003d2c
 800721c:	200003c8 	.word	0x200003c8

08007220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007228:	f000 f852 	bl	80072d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <prvIdleTask+0x28>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d9f9      	bls.n	8007228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <prvIdleTask+0x2c>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007244:	e7f0      	b.n	8007228 <prvIdleTask+0x8>
 8007246:	bf00      	nop
 8007248:	20003d30 	.word	0x20003d30
 800724c:	e000ed04 	.word	0xe000ed04

08007250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007256:	2300      	movs	r3, #0
 8007258:	607b      	str	r3, [r7, #4]
 800725a:	e00c      	b.n	8007276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <prvInitialiseTaskLists+0x60>)
 8007268:	4413      	add	r3, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fb17 	bl	800689e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3301      	adds	r3, #1
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b06      	cmp	r3, #6
 800727a:	d9ef      	bls.n	800725c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800727c:	480d      	ldr	r0, [pc, #52]	; (80072b4 <prvInitialiseTaskLists+0x64>)
 800727e:	f7ff fb0e 	bl	800689e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007282:	480d      	ldr	r0, [pc, #52]	; (80072b8 <prvInitialiseTaskLists+0x68>)
 8007284:	f7ff fb0b 	bl	800689e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007288:	480c      	ldr	r0, [pc, #48]	; (80072bc <prvInitialiseTaskLists+0x6c>)
 800728a:	f7ff fb08 	bl	800689e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800728e:	480c      	ldr	r0, [pc, #48]	; (80072c0 <prvInitialiseTaskLists+0x70>)
 8007290:	f7ff fb05 	bl	800689e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007294:	480b      	ldr	r0, [pc, #44]	; (80072c4 <prvInitialiseTaskLists+0x74>)
 8007296:	f7ff fb02 	bl	800689e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800729a:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <prvInitialiseTaskLists+0x78>)
 800729c:	4a05      	ldr	r2, [pc, #20]	; (80072b4 <prvInitialiseTaskLists+0x64>)
 800729e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <prvInitialiseTaskLists+0x7c>)
 80072a2:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <prvInitialiseTaskLists+0x68>)
 80072a4:	601a      	str	r2, [r3, #0]
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20003d30 	.word	0x20003d30
 80072b4:	20003dbc 	.word	0x20003dbc
 80072b8:	20003dd0 	.word	0x20003dd0
 80072bc:	20003dec 	.word	0x20003dec
 80072c0:	20003e00 	.word	0x20003e00
 80072c4:	20003e18 	.word	0x20003e18
 80072c8:	20003de4 	.word	0x20003de4
 80072cc:	20003de8 	.word	0x20003de8

080072d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d6:	e019      	b.n	800730c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072d8:	f000 fa0c 	bl	80076f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072dc:	4b10      	ldr	r3, [pc, #64]	; (8007320 <prvCheckTasksWaitingTermination+0x50>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fb62 	bl	80069b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <prvCheckTasksWaitingTermination+0x54>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	4a0b      	ldr	r2, [pc, #44]	; (8007324 <prvCheckTasksWaitingTermination+0x54>)
 80072f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <prvCheckTasksWaitingTermination+0x58>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	4a0a      	ldr	r2, [pc, #40]	; (8007328 <prvCheckTasksWaitingTermination+0x58>)
 8007300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007302:	f000 fa27 	bl	8007754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f810 	bl	800732c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <prvCheckTasksWaitingTermination+0x58>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e1      	bne.n	80072d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20003e00 	.word	0x20003e00
 8007324:	20003e2c 	.word	0x20003e2c
 8007328:	20003e14 	.word	0x20003e14

0800732c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	334c      	adds	r3, #76	; 0x4c
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fce3 	bl	8007d04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d108      	bne.n	800735a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fb7f 	bl	8007a50 <vPortFree>
				vPortFree( pxTCB );
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb7c 	bl	8007a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007358:	e018      	b.n	800738c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007360:	2b01      	cmp	r3, #1
 8007362:	d103      	bne.n	800736c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fb73 	bl	8007a50 <vPortFree>
	}
 800736a:	e00f      	b.n	800738c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007372:	2b02      	cmp	r3, #2
 8007374:	d00a      	beq.n	800738c <prvDeleteTCB+0x60>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	60fb      	str	r3, [r7, #12]
}
 8007388:	bf00      	nop
 800738a:	e7fe      	b.n	800738a <prvDeleteTCB+0x5e>
	}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800739a:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <prvResetNextTaskUnblockTime+0x38>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <prvResetNextTaskUnblockTime+0x3c>)
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073ac:	e008      	b.n	80073c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <prvResetNextTaskUnblockTime+0x38>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	4a04      	ldr	r2, [pc, #16]	; (80073d0 <prvResetNextTaskUnblockTime+0x3c>)
 80073be:	6013      	str	r3, [r2, #0]
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20003de4 	.word	0x20003de4
 80073d0:	20003e4c 	.word	0x20003e4c

080073d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073de:	4b29      	ldr	r3, [pc, #164]	; (8007484 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e4:	4b28      	ldr	r3, [pc, #160]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fae1 	bl	80069b2 <uxListRemove>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073f6:	4b24      	ldr	r3, [pc, #144]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	2201      	movs	r2, #1
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43da      	mvns	r2, r3
 8007404:	4b21      	ldr	r3, [pc, #132]	; (800748c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4013      	ands	r3, r2
 800740a:	4a20      	ldr	r2, [pc, #128]	; (800748c <prvAddCurrentTaskToDelayedList+0xb8>)
 800740c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d10a      	bne.n	800742c <prvAddCurrentTaskToDelayedList+0x58>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d007      	beq.n	800742c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741c:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	481a      	ldr	r0, [pc, #104]	; (8007490 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007426:	f7ff fa67 	bl	80068f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800742a:	e026      	b.n	800747a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	d209      	bcs.n	8007458 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007444:	4b13      	ldr	r3, [pc, #76]	; (8007494 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7ff fa75 	bl	8006940 <vListInsert>
}
 8007456:	e010      	b.n	800747a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <prvAddCurrentTaskToDelayedList+0xc4>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <prvAddCurrentTaskToDelayedList+0xb4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3304      	adds	r3, #4
 8007462:	4619      	mov	r1, r3
 8007464:	4610      	mov	r0, r2
 8007466:	f7ff fa6b 	bl	8006940 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <prvAddCurrentTaskToDelayedList+0xc8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	d202      	bcs.n	800747a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007474:	4a09      	ldr	r2, [pc, #36]	; (800749c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6013      	str	r3, [r2, #0]
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20003e30 	.word	0x20003e30
 8007488:	20003d2c 	.word	0x20003d2c
 800748c:	20003e34 	.word	0x20003e34
 8007490:	20003e18 	.word	0x20003e18
 8007494:	20003de8 	.word	0x20003de8
 8007498:	20003de4 	.word	0x20003de4
 800749c:	20003e4c 	.word	0x20003e4c

080074a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3b04      	subs	r3, #4
 80074b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3b04      	subs	r3, #4
 80074be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b04      	subs	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074d0:	4a0c      	ldr	r2, [pc, #48]	; (8007504 <pxPortInitialiseStack+0x64>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3b14      	subs	r3, #20
 80074da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b04      	subs	r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f06f 0202 	mvn.w	r2, #2
 80074ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3b20      	subs	r3, #32
 80074f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	08007509 	.word	0x08007509

08007508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <prvTaskExitError+0x54>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d00a      	beq.n	8007532 <prvTaskExitError+0x2a>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	60fb      	str	r3, [r7, #12]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <prvTaskExitError+0x28>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60bb      	str	r3, [r7, #8]
}
 8007544:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007546:	bf00      	nop
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0fc      	beq.n	8007548 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	200003c4 	.word	0x200003c4

08007560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007560:	4b07      	ldr	r3, [pc, #28]	; (8007580 <pxCurrentTCBConst2>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756a:	f380 8809 	msr	PSP, r0
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	4770      	bx	lr
 800757c:	f3af 8000 	nop.w

08007580 <pxCurrentTCBConst2>:
 8007580:	20003d2c 	.word	0x20003d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <prvPortStartFirstTask+0x24>)
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	6800      	ldr	r0, [r0, #0]
 800758e:	f380 8808 	msr	MSP, r0
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8814 	msr	CONTROL, r0
 800759a:	b662      	cpsie	i
 800759c:	b661      	cpsie	f
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	df00      	svc	0
 80075a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075aa:	bf00      	nop
 80075ac:	e000ed08 	.word	0xe000ed08

080075b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075b6:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <xPortStartScheduler+0x120>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a46      	ldr	r2, [pc, #280]	; (80076d4 <xPortStartScheduler+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10a      	bne.n	80075d6 <xPortStartScheduler+0x26>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	613b      	str	r3, [r7, #16]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075d6:	4b3e      	ldr	r3, [pc, #248]	; (80076d0 <xPortStartScheduler+0x120>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a3f      	ldr	r2, [pc, #252]	; (80076d8 <xPortStartScheduler+0x128>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10a      	bne.n	80075f6 <xPortStartScheduler+0x46>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60fb      	str	r3, [r7, #12]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075f6:	4b39      	ldr	r3, [pc, #228]	; (80076dc <xPortStartScheduler+0x12c>)
 80075f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007618:	b2da      	uxtb	r2, r3
 800761a:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <xPortStartScheduler+0x130>)
 800761c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <xPortStartScheduler+0x134>)
 8007620:	2207      	movs	r2, #7
 8007622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007624:	e009      	b.n	800763a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007626:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <xPortStartScheduler+0x134>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3b01      	subs	r3, #1
 800762c:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <xPortStartScheduler+0x134>)
 800762e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d0ef      	beq.n	8007626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007646:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <xPortStartScheduler+0x134>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1c3 0307 	rsb	r3, r3, #7
 800764e:	2b04      	cmp	r3, #4
 8007650:	d00a      	beq.n	8007668 <xPortStartScheduler+0xb8>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007668:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <xPortStartScheduler+0x134>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	4a1d      	ldr	r2, [pc, #116]	; (80076e4 <xPortStartScheduler+0x134>)
 8007670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007672:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <xPortStartScheduler+0x134>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800767a:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <xPortStartScheduler+0x134>)
 800767c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	b2da      	uxtb	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007686:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <xPortStartScheduler+0x138>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <xPortStartScheduler+0x138>)
 800768c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <xPortStartScheduler+0x138>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <xPortStartScheduler+0x138>)
 8007698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800769c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800769e:	f000 f8dd 	bl	800785c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <xPortStartScheduler+0x13c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076a8:	f000 f8fc 	bl	80078a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076ac:	4b10      	ldr	r3, [pc, #64]	; (80076f0 <xPortStartScheduler+0x140>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <xPortStartScheduler+0x140>)
 80076b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076b8:	f7ff ff66 	bl	8007588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076bc:	f7ff fd4e 	bl	800715c <vTaskSwitchContext>
	prvTaskExitError();
 80076c0:	f7ff ff22 	bl	8007508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	e000ed00 	.word	0xe000ed00
 80076d4:	410fc271 	.word	0x410fc271
 80076d8:	410fc270 	.word	0x410fc270
 80076dc:	e000e400 	.word	0xe000e400
 80076e0:	20003e58 	.word	0x20003e58
 80076e4:	20003e5c 	.word	0x20003e5c
 80076e8:	e000ed20 	.word	0xe000ed20
 80076ec:	200003c4 	.word	0x200003c4
 80076f0:	e000ef34 	.word	0xe000ef34

080076f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	607b      	str	r3, [r7, #4]
}
 800770c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <vPortEnterCritical+0x58>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a0d      	ldr	r2, [pc, #52]	; (800774c <vPortEnterCritical+0x58>)
 8007716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <vPortEnterCritical+0x58>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d10f      	bne.n	8007740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <vPortEnterCritical+0x5c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <vPortEnterCritical+0x4c>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	603b      	str	r3, [r7, #0]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vPortEnterCritical+0x4a>
	}
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	200003c4 	.word	0x200003c4
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800775a:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <vPortExitCritical+0x50>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <vPortExitCritical+0x24>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	607b      	str	r3, [r7, #4]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <vPortExitCritical+0x50>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3b01      	subs	r3, #1
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <vPortExitCritical+0x50>)
 8007780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007782:	4b08      	ldr	r3, [pc, #32]	; (80077a4 <vPortExitCritical+0x50>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d105      	bne.n	8007796 <vPortExitCritical+0x42>
 800778a:	2300      	movs	r3, #0
 800778c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	200003c4 	.word	0x200003c4
	...

080077b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077b0:	f3ef 8009 	mrs	r0, PSP
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	4b15      	ldr	r3, [pc, #84]	; (8007810 <pxCurrentTCBConst>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	f01e 0f10 	tst.w	lr, #16
 80077c0:	bf08      	it	eq
 80077c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ca:	6010      	str	r0, [r2, #0]
 80077cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077d4:	f380 8811 	msr	BASEPRI, r0
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f7ff fcbc 	bl	800715c <vTaskSwitchContext>
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f380 8811 	msr	BASEPRI, r0
 80077ec:	bc09      	pop	{r0, r3}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f01e 0f10 	tst.w	lr, #16
 80077fa:	bf08      	it	eq
 80077fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007800:	f380 8809 	msr	PSP, r0
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst>:
 8007810:	20003d2c 	.word	0x20003d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007832:	f7ff fbdb 	bl	8006fec <xTaskIncrementTick>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <SysTick_Handler+0x40>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007850:	bf00      	nop
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007866:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <vPortSetupTimerInterrupt+0x38>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <vPortSetupTimerInterrupt+0x3c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <vPortSetupTimerInterrupt+0x40>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <vPortSetupTimerInterrupt+0x44>)
 800787a:	3b01      	subs	r3, #1
 800787c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <vPortSetupTimerInterrupt+0x34>)
 8007880:	2207      	movs	r2, #7
 8007882:	601a      	str	r2, [r3, #0]
}
 8007884:	bf00      	nop
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000e010 	.word	0xe000e010
 8007894:	e000e018 	.word	0xe000e018
 8007898:	20000004 	.word	0x20000004
 800789c:	10624dd3 	.word	0x10624dd3
 80078a0:	e000e014 	.word	0xe000e014

080078a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078b4 <vPortEnableVFP+0x10>
 80078a8:	6801      	ldr	r1, [r0, #0]
 80078aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80078ae:	6001      	str	r1, [r0, #0]
 80078b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078b2:	bf00      	nop
 80078b4:	e000ed88 	.word	0xe000ed88

080078b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078c4:	f7ff fae8 	bl	8006e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078c8:	4b5b      	ldr	r3, [pc, #364]	; (8007a38 <pvPortMalloc+0x180>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078d0:	f000 f920 	bl	8007b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078d4:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <pvPortMalloc+0x184>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8093 	bne.w	8007a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01d      	beq.n	8007924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078e8:	2208      	movs	r2, #8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d014      	beq.n	8007924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f023 0307 	bic.w	r3, r3, #7
 8007900:	3308      	adds	r3, #8
 8007902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <pvPortMalloc+0x6c>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	617b      	str	r3, [r7, #20]
}
 8007920:	bf00      	nop
 8007922:	e7fe      	b.n	8007922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d06e      	beq.n	8007a08 <pvPortMalloc+0x150>
 800792a:	4b45      	ldr	r3, [pc, #276]	; (8007a40 <pvPortMalloc+0x188>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d869      	bhi.n	8007a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007934:	4b43      	ldr	r3, [pc, #268]	; (8007a44 <pvPortMalloc+0x18c>)
 8007936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007938:	4b42      	ldr	r3, [pc, #264]	; (8007a44 <pvPortMalloc+0x18c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800793e:	e004      	b.n	800794a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	429a      	cmp	r2, r3
 8007952:	d903      	bls.n	800795c <pvPortMalloc+0xa4>
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f1      	bne.n	8007940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800795c:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <pvPortMalloc+0x180>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007962:	429a      	cmp	r2, r3
 8007964:	d050      	beq.n	8007a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2208      	movs	r2, #8
 800796c:	4413      	add	r3, r2
 800796e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	2308      	movs	r3, #8
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	429a      	cmp	r2, r3
 8007986:	d91f      	bls.n	80079c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4413      	add	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <pvPortMalloc+0xf8>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	613b      	str	r3, [r7, #16]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079c2:	69b8      	ldr	r0, [r7, #24]
 80079c4:	f000 f908 	bl	8007bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c8:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <pvPortMalloc+0x188>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	4a1b      	ldr	r2, [pc, #108]	; (8007a40 <pvPortMalloc+0x188>)
 80079d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <pvPortMalloc+0x188>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b1b      	ldr	r3, [pc, #108]	; (8007a48 <pvPortMalloc+0x190>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d203      	bcs.n	80079ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <pvPortMalloc+0x188>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <pvPortMalloc+0x190>)
 80079e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <pvPortMalloc+0x184>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <pvPortMalloc+0x194>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <pvPortMalloc+0x194>)
 8007a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a08:	f7ff fa54 	bl	8006eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0307 	and.w	r3, r3, #7
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <pvPortMalloc+0x174>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60fb      	str	r3, [r7, #12]
}
 8007a28:	bf00      	nop
 8007a2a:	e7fe      	b.n	8007a2a <pvPortMalloc+0x172>
	return pvReturn;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	; 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20007a68 	.word	0x20007a68
 8007a3c:	20007a7c 	.word	0x20007a7c
 8007a40:	20007a6c 	.word	0x20007a6c
 8007a44:	20007a60 	.word	0x20007a60
 8007a48:	20007a70 	.word	0x20007a70
 8007a4c:	20007a74 	.word	0x20007a74

08007a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d04d      	beq.n	8007afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a62:	2308      	movs	r3, #8
 8007a64:	425b      	negs	r3, r3
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4413      	add	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <vPortFree+0xb8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10a      	bne.n	8007a94 <vPortFree+0x44>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60fb      	str	r3, [r7, #12]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <vPortFree+0x62>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	60bb      	str	r3, [r7, #8]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <vPortFree+0xb8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01e      	beq.n	8007afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11a      	bne.n	8007afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <vPortFree+0xb8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad8:	f7ff f9de 	bl	8006e98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <vPortFree+0xbc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <vPortFree+0xbc>)
 8007ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aea:	6938      	ldr	r0, [r7, #16]
 8007aec:	f000 f874 	bl	8007bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <vPortFree+0xc0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	4a06      	ldr	r2, [pc, #24]	; (8007b10 <vPortFree+0xc0>)
 8007af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007afa:	f7ff f9db 	bl	8006eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007afe:	bf00      	nop
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20007a7c 	.word	0x20007a7c
 8007b0c:	20007a6c 	.word	0x20007a6c
 8007b10:	20007a78 	.word	0x20007a78

08007b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b20:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <prvHeapInit+0xac>)
 8007b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3307      	adds	r3, #7
 8007b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0307 	bic.w	r3, r3, #7
 8007b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <prvHeapInit+0xac>)
 8007b44:	4413      	add	r3, r2
 8007b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <prvHeapInit+0xb0>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <prvHeapInit+0xb0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b60:	2208      	movs	r2, #8
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0307 	bic.w	r3, r3, #7
 8007b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b76:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvHeapInit+0xb4>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <prvHeapInit+0xb8>)
 8007ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <prvHeapInit+0xbc>)
 8007baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <prvHeapInit+0xc0>)
 8007bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	20003e60 	.word	0x20003e60
 8007bc4:	20007a60 	.word	0x20007a60
 8007bc8:	20007a68 	.word	0x20007a68
 8007bcc:	20007a70 	.word	0x20007a70
 8007bd0:	20007a6c 	.word	0x20007a6c
 8007bd4:	20007a7c 	.word	0x20007a7c

08007bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007be0:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <prvInsertBlockIntoFreeList+0xac>)
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e002      	b.n	8007bec <prvInsertBlockIntoFreeList+0x14>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d8f7      	bhi.n	8007be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d108      	bne.n	8007c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	441a      	add	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	441a      	add	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d118      	bne.n	8007c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <prvInsertBlockIntoFreeList+0xb0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d00d      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	e008      	b.n	8007c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <prvInsertBlockIntoFreeList+0xb0>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	e003      	b.n	8007c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d002      	beq.n	8007c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20007a60 	.word	0x20007a60
 8007c88:	20007a68 	.word	0x20007a68

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	; (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	; (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	; (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f000 f8e4 	bl	8007e6c <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	08007f6c 	.word	0x08007f6c
 8007cc8:	08007f6c 	.word	0x08007f6c
 8007ccc:	08007f6c 	.word	0x08007f6c
 8007cd0:	08007f70 	.word	0x08007f70

08007cd4 <__retarget_lock_acquire_recursive>:
 8007cd4:	4770      	bx	lr

08007cd6 <__retarget_lock_release_recursive>:
 8007cd6:	4770      	bx	lr

08007cd8 <memset>:
 8007cd8:	4402      	add	r2, r0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <memset+0xa>
 8007ce0:	4770      	bx	lr
 8007ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce6:	e7f9      	b.n	8007cdc <memset+0x4>

08007ce8 <cleanup_glue>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	460c      	mov	r4, r1
 8007cec:	6809      	ldr	r1, [r1, #0]
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b109      	cbz	r1, 8007cf6 <cleanup_glue+0xe>
 8007cf2:	f7ff fff9 	bl	8007ce8 <cleanup_glue>
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cfe:	f000 b869 	b.w	8007dd4 <_free_r>
	...

08007d04 <_reclaim_reent>:
 8007d04:	4b2c      	ldr	r3, [pc, #176]	; (8007db8 <_reclaim_reent+0xb4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4283      	cmp	r3, r0
 8007d0a:	b570      	push	{r4, r5, r6, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	d051      	beq.n	8007db4 <_reclaim_reent+0xb0>
 8007d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d12:	b143      	cbz	r3, 8007d26 <_reclaim_reent+0x22>
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d14a      	bne.n	8007db0 <_reclaim_reent+0xac>
 8007d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d1c:	6819      	ldr	r1, [r3, #0]
 8007d1e:	b111      	cbz	r1, 8007d26 <_reclaim_reent+0x22>
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 f857 	bl	8007dd4 <_free_r>
 8007d26:	6961      	ldr	r1, [r4, #20]
 8007d28:	b111      	cbz	r1, 8007d30 <_reclaim_reent+0x2c>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 f852 	bl	8007dd4 <_free_r>
 8007d30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d32:	b111      	cbz	r1, 8007d3a <_reclaim_reent+0x36>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 f84d 	bl	8007dd4 <_free_r>
 8007d3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d3c:	b111      	cbz	r1, 8007d44 <_reclaim_reent+0x40>
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 f848 	bl	8007dd4 <_free_r>
 8007d44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d46:	b111      	cbz	r1, 8007d4e <_reclaim_reent+0x4a>
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 f843 	bl	8007dd4 <_free_r>
 8007d4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d50:	b111      	cbz	r1, 8007d58 <_reclaim_reent+0x54>
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f83e 	bl	8007dd4 <_free_r>
 8007d58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d5a:	b111      	cbz	r1, 8007d62 <_reclaim_reent+0x5e>
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 f839 	bl	8007dd4 <_free_r>
 8007d62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d64:	b111      	cbz	r1, 8007d6c <_reclaim_reent+0x68>
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 f834 	bl	8007dd4 <_free_r>
 8007d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d6e:	b111      	cbz	r1, 8007d76 <_reclaim_reent+0x72>
 8007d70:	4620      	mov	r0, r4
 8007d72:	f000 f82f 	bl	8007dd4 <_free_r>
 8007d76:	69a3      	ldr	r3, [r4, #24]
 8007d78:	b1e3      	cbz	r3, 8007db4 <_reclaim_reent+0xb0>
 8007d7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	4798      	blx	r3
 8007d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d82:	b1b9      	cbz	r1, 8007db4 <_reclaim_reent+0xb0>
 8007d84:	4620      	mov	r0, r4
 8007d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d8a:	f7ff bfad 	b.w	8007ce8 <cleanup_glue>
 8007d8e:	5949      	ldr	r1, [r1, r5]
 8007d90:	b941      	cbnz	r1, 8007da4 <_reclaim_reent+0xa0>
 8007d92:	3504      	adds	r5, #4
 8007d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d96:	2d80      	cmp	r5, #128	; 0x80
 8007d98:	68d9      	ldr	r1, [r3, #12]
 8007d9a:	d1f8      	bne.n	8007d8e <_reclaim_reent+0x8a>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f819 	bl	8007dd4 <_free_r>
 8007da2:	e7ba      	b.n	8007d1a <_reclaim_reent+0x16>
 8007da4:	680e      	ldr	r6, [r1, #0]
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f814 	bl	8007dd4 <_free_r>
 8007dac:	4631      	mov	r1, r6
 8007dae:	e7ef      	b.n	8007d90 <_reclaim_reent+0x8c>
 8007db0:	2500      	movs	r5, #0
 8007db2:	e7ef      	b.n	8007d94 <_reclaim_reent+0x90>
 8007db4:	bd70      	pop	{r4, r5, r6, pc}
 8007db6:	bf00      	nop
 8007db8:	200003c8 	.word	0x200003c8

08007dbc <__malloc_lock>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <__malloc_lock+0x8>)
 8007dbe:	f7ff bf89 	b.w	8007cd4 <__retarget_lock_acquire_recursive>
 8007dc2:	bf00      	nop
 8007dc4:	20007a80 	.word	0x20007a80

08007dc8 <__malloc_unlock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__malloc_unlock+0x8>)
 8007dca:	f7ff bf84 	b.w	8007cd6 <__retarget_lock_release_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20007a80 	.word	0x20007a80

08007dd4 <_free_r>:
 8007dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dd6:	2900      	cmp	r1, #0
 8007dd8:	d044      	beq.n	8007e64 <_free_r+0x90>
 8007dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dde:	9001      	str	r0, [sp, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f1a1 0404 	sub.w	r4, r1, #4
 8007de6:	bfb8      	it	lt
 8007de8:	18e4      	addlt	r4, r4, r3
 8007dea:	f7ff ffe7 	bl	8007dbc <__malloc_lock>
 8007dee:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <_free_r+0x94>)
 8007df0:	9801      	ldr	r0, [sp, #4]
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	b933      	cbnz	r3, 8007e04 <_free_r+0x30>
 8007df6:	6063      	str	r3, [r4, #4]
 8007df8:	6014      	str	r4, [r2, #0]
 8007dfa:	b003      	add	sp, #12
 8007dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e00:	f7ff bfe2 	b.w	8007dc8 <__malloc_unlock>
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d908      	bls.n	8007e1a <_free_r+0x46>
 8007e08:	6825      	ldr	r5, [r4, #0]
 8007e0a:	1961      	adds	r1, r4, r5
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	bf01      	itttt	eq
 8007e10:	6819      	ldreq	r1, [r3, #0]
 8007e12:	685b      	ldreq	r3, [r3, #4]
 8007e14:	1949      	addeq	r1, r1, r5
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	e7ed      	b.n	8007df6 <_free_r+0x22>
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	b10b      	cbz	r3, 8007e24 <_free_r+0x50>
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d9fa      	bls.n	8007e1a <_free_r+0x46>
 8007e24:	6811      	ldr	r1, [r2, #0]
 8007e26:	1855      	adds	r5, r2, r1
 8007e28:	42a5      	cmp	r5, r4
 8007e2a:	d10b      	bne.n	8007e44 <_free_r+0x70>
 8007e2c:	6824      	ldr	r4, [r4, #0]
 8007e2e:	4421      	add	r1, r4
 8007e30:	1854      	adds	r4, r2, r1
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	d1e0      	bne.n	8007dfa <_free_r+0x26>
 8007e38:	681c      	ldr	r4, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	6053      	str	r3, [r2, #4]
 8007e3e:	4421      	add	r1, r4
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	e7da      	b.n	8007dfa <_free_r+0x26>
 8007e44:	d902      	bls.n	8007e4c <_free_r+0x78>
 8007e46:	230c      	movs	r3, #12
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	e7d6      	b.n	8007dfa <_free_r+0x26>
 8007e4c:	6825      	ldr	r5, [r4, #0]
 8007e4e:	1961      	adds	r1, r4, r5
 8007e50:	428b      	cmp	r3, r1
 8007e52:	bf04      	itt	eq
 8007e54:	6819      	ldreq	r1, [r3, #0]
 8007e56:	685b      	ldreq	r3, [r3, #4]
 8007e58:	6063      	str	r3, [r4, #4]
 8007e5a:	bf04      	itt	eq
 8007e5c:	1949      	addeq	r1, r1, r5
 8007e5e:	6021      	streq	r1, [r4, #0]
 8007e60:	6054      	str	r4, [r2, #4]
 8007e62:	e7ca      	b.n	8007dfa <_free_r+0x26>
 8007e64:	b003      	add	sp, #12
 8007e66:	bd30      	pop	{r4, r5, pc}
 8007e68:	20007a84 	.word	0x20007a84

08007e6c <_init>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr

08007e78 <_fini>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr
